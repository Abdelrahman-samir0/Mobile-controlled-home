
FINAL_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004a2  00800060  00002a38  00002acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000032b  00800502  00800502  00002f6e  2**0
                  ALLOC
  3 .stab         00002a78  00000000  00000000  00002f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000171d  00000000  00000000  000059e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007105  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007245  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000adf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b085  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__vector_10>
      2c:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__vector_13>
      38:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__vector_14>
      3c:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	18 e0       	ldi	r17, 0x08	; 8
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b4 e0       	ldi	r27, 0x04	; 4
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	94 e0       	ldi	r25, 0x04	; 4
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

#include <util/delay.h>
#define F_CPU 8000000UL

int main ()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     b4e:	0e 94 86 09 	call	0x130c	; 0x130c <MDIO_voidInit>
	MUART_voidInit();
     b52:	0e 94 a2 12 	call	0x2544	; 0x2544 <MUART_voidInit>
	MTIMER0_voidInit();
     b56:	0e 94 15 11 	call	0x222a	; 0x222a <MTIMER0_voidInit>
	MGI_voidEnable();
     b5a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <MGI_voidEnable>
	H_voidHomePageLogOrReg();
     b5e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <H_voidHomePageLogOrReg>
     b62:	ff cf       	rjmp	.-2      	; 0xb62 <main+0x1c>

00000b64 <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

//MDIO_voidSetPinDirection (DIO_PORTA, PIN5, DIO_OUTPUT);

void MDIO_voidSetPinDirection (DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_DIRECTION_e A_Direction)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	2d 97       	sbiw	r28, 0x0d	; 13
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	6a 83       	std	Y+2, r22	; 0x02
     b7c:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= DIO_PIN7) && (A_Direction <= DIO_OUTPUT) )
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	84 30       	cpi	r24, 0x04	; 4
     b82:	08 f0       	brcs	.+2      	; 0xb86 <MDIO_voidSetPinDirection+0x22>
     b84:	09 c1       	rjmp	.+530    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	88 30       	cpi	r24, 0x08	; 8
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <MDIO_voidSetPinDirection+0x2a>
     b8c:	05 c1       	rjmp	.+522    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	08 f0       	brcs	.+2      	; 0xb96 <MDIO_voidSetPinDirection+0x32>
     b94:	01 c1       	rjmp	.+514    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_portID)
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3d 87       	std	Y+13, r19	; 0x0d
     b9e:	2c 87       	std	Y+12, r18	; 0x0c
     ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <MDIO_voidSetPinDirection+0x48>
     baa:	4f c0       	rjmp	.+158    	; 0xc4a <MDIO_voidSetPinDirection+0xe6>
     bac:	2c 85       	ldd	r18, Y+12	; 0x0c
     bae:	3d 85       	ldd	r19, Y+13	; 0x0d
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <MDIO_voidSetPinDirection+0x5c>
     bb6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	71 f0       	breq	.+28     	; 0xbda <MDIO_voidSetPinDirection+0x76>
     bbe:	ec c0       	rjmp	.+472    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
     bc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     bc4:	22 30       	cpi	r18, 0x02	; 2
     bc6:	31 05       	cpc	r19, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <MDIO_voidSetPinDirection+0x68>
     bca:	77 c0       	rjmp	.+238    	; 0xcba <MDIO_voidSetPinDirection+0x156>
     bcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bce:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <MDIO_voidSetPinDirection+0x74>
     bd6:	a9 c0       	rjmp	.+338    	; 0xd2a <MDIO_voidSetPinDirection+0x1c6>
     bd8:	df c0       	rjmp	.+446    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_Direction)
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	3b 87       	std	Y+11, r19	; 0x0b
     be2:	2a 87       	std	Y+10, r18	; 0x0a
     be4:	8a 85       	ldd	r24, Y+10	; 0x0a
     be6:	9b 85       	ldd	r25, Y+11	; 0x0b
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	31 f0       	breq	.+12     	; 0xbf8 <MDIO_voidSetPinDirection+0x94>
     bec:	2a 85       	ldd	r18, Y+10	; 0x0a
     bee:	3b 85       	ldd	r19, Y+11	; 0x0b
     bf0:	21 30       	cpi	r18, 0x01	; 1
     bf2:	31 05       	cpc	r19, r1
     bf4:	b1 f0       	breq	.+44     	; 0xc22 <MDIO_voidSetPinDirection+0xbe>
     bf6:	d0 c0       	rjmp	.+416    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
     bf8:	aa e3       	ldi	r26, 0x3A	; 58
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e3       	ldi	r30, 0x3A	; 58
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <MDIO_voidSetPinDirection+0xb2>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <MDIO_voidSetPinDirection+0xae>
     c1a:	80 95       	com	r24
     c1c:	84 23       	and	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	bb c0       	rjmp	.+374    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
     c22:	aa e3       	ldi	r26, 0x3A	; 58
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	ea e3       	ldi	r30, 0x3A	; 58
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <MDIO_voidSetPinDirection+0xdc>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <MDIO_voidSetPinDirection+0xd8>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	a7 c0       	rjmp	.+334    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_Direction)
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	39 87       	std	Y+9, r19	; 0x09
     c52:	28 87       	std	Y+8, r18	; 0x08
     c54:	88 85       	ldd	r24, Y+8	; 0x08
     c56:	99 85       	ldd	r25, Y+9	; 0x09
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	31 f0       	breq	.+12     	; 0xc68 <MDIO_voidSetPinDirection+0x104>
     c5c:	28 85       	ldd	r18, Y+8	; 0x08
     c5e:	39 85       	ldd	r19, Y+9	; 0x09
     c60:	21 30       	cpi	r18, 0x01	; 1
     c62:	31 05       	cpc	r19, r1
     c64:	b1 f0       	breq	.+44     	; 0xc92 <MDIO_voidSetPinDirection+0x12e>
     c66:	98 c0       	rjmp	.+304    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_pinID);
     c68:	a7 e3       	ldi	r26, 0x37	; 55
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e7 e3       	ldi	r30, 0x37	; 55
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <MDIO_voidSetPinDirection+0x122>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <MDIO_voidSetPinDirection+0x11e>
     c8a:	80 95       	com	r24
     c8c:	84 23       	and	r24, r20
     c8e:	8c 93       	st	X, r24
     c90:	83 c0       	rjmp	.+262    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_pinID);
     c92:	a7 e3       	ldi	r26, 0x37	; 55
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e7 e3       	ldi	r30, 0x37	; 55
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	48 2f       	mov	r20, r24
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 2e       	mov	r0, r18
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <MDIO_voidSetPinDirection+0x14c>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0a 94       	dec	r0
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <MDIO_voidSetPinDirection+0x148>
     cb4:	84 2b       	or	r24, r20
     cb6:	8c 93       	st	X, r24
     cb8:	6f c0       	rjmp	.+222    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_Direction)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	3f 83       	std	Y+7, r19	; 0x07
     cc2:	2e 83       	std	Y+6, r18	; 0x06
     cc4:	8e 81       	ldd	r24, Y+6	; 0x06
     cc6:	9f 81       	ldd	r25, Y+7	; 0x07
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	31 f0       	breq	.+12     	; 0xcd8 <MDIO_voidSetPinDirection+0x174>
     ccc:	2e 81       	ldd	r18, Y+6	; 0x06
     cce:	3f 81       	ldd	r19, Y+7	; 0x07
     cd0:	21 30       	cpi	r18, 0x01	; 1
     cd2:	31 05       	cpc	r19, r1
     cd4:	b1 f0       	breq	.+44     	; 0xd02 <MDIO_voidSetPinDirection+0x19e>
     cd6:	60 c0       	rjmp	.+192    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_pinID);
     cd8:	a4 e3       	ldi	r26, 0x34	; 52
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e4 e3       	ldi	r30, 0x34	; 52
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <MDIO_voidSetPinDirection+0x192>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <MDIO_voidSetPinDirection+0x18e>
     cfa:	80 95       	com	r24
     cfc:	84 23       	and	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	4b c0       	rjmp	.+150    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_pinID);
     d02:	a4 e3       	ldi	r26, 0x34	; 52
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e4 e3       	ldi	r30, 0x34	; 52
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <MDIO_voidSetPinDirection+0x1bc>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <MDIO_voidSetPinDirection+0x1b8>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_Direction)
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	3d 83       	std	Y+5, r19	; 0x05
     d32:	2c 83       	std	Y+4, r18	; 0x04
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	31 f0       	breq	.+12     	; 0xd48 <MDIO_voidSetPinDirection+0x1e4>
     d3c:	2c 81       	ldd	r18, Y+4	; 0x04
     d3e:	3d 81       	ldd	r19, Y+5	; 0x05
     d40:	21 30       	cpi	r18, 0x01	; 1
     d42:	31 05       	cpc	r19, r1
     d44:	b1 f0       	breq	.+44     	; 0xd72 <MDIO_voidSetPinDirection+0x20e>
     d46:	28 c0       	rjmp	.+80     	; 0xd98 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_pinID);
     d48:	a1 e3       	ldi	r26, 0x31	; 49
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e1 e3       	ldi	r30, 0x31	; 49
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <MDIO_voidSetPinDirection+0x202>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <MDIO_voidSetPinDirection+0x1fe>
     d6a:	80 95       	com	r24
     d6c:	84 23       	and	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	13 c0       	rjmp	.+38     	; 0xd98 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_pinID);
     d72:	a1 e3       	ldi	r26, 0x31	; 49
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e1 e3       	ldi	r30, 0x31	; 49
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <MDIO_voidSetPinDirection+0x22c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <MDIO_voidSetPinDirection+0x228>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     d98:	2d 96       	adiw	r28, 0x0d	; 13
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID, DIO_VALUE_e A_Value)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	2d 97       	sbiw	r28, 0x0d	; 13
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	6a 83       	std	Y+2, r22	; 0x02
     dc2:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= DIO_PIN7) && (A_Value <= DIO_SET) )
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	84 30       	cpi	r24, 0x04	; 4
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <MDIO_voidSetPinValue+0x22>
     dca:	09 c1       	rjmp	.+530    	; 0xfde <MDIO_voidSetPinValue+0x234>
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 30       	cpi	r24, 0x08	; 8
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <MDIO_voidSetPinValue+0x2a>
     dd2:	05 c1       	rjmp	.+522    	; 0xfde <MDIO_voidSetPinValue+0x234>
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	08 f0       	brcs	.+2      	; 0xddc <MDIO_voidSetPinValue+0x32>
     dda:	01 c1       	rjmp	.+514    	; 0xfde <MDIO_voidSetPinValue+0x234>
	{
		switch (A_portID)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	3d 87       	std	Y+13, r19	; 0x0d
     de4:	2c 87       	std	Y+12, r18	; 0x0c
     de6:	8c 85       	ldd	r24, Y+12	; 0x0c
     de8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	91 05       	cpc	r25, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <MDIO_voidSetPinValue+0x48>
     df0:	4f c0       	rjmp	.+158    	; 0xe90 <MDIO_voidSetPinValue+0xe6>
     df2:	2c 85       	ldd	r18, Y+12	; 0x0c
     df4:	3d 85       	ldd	r19, Y+13	; 0x0d
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f4       	brge	.+10     	; 0xe06 <MDIO_voidSetPinValue+0x5c>
     dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfe:	9d 85       	ldd	r25, Y+13	; 0x0d
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	71 f0       	breq	.+28     	; 0xe20 <MDIO_voidSetPinValue+0x76>
     e04:	ec c0       	rjmp	.+472    	; 0xfde <MDIO_voidSetPinValue+0x234>
     e06:	2c 85       	ldd	r18, Y+12	; 0x0c
     e08:	3d 85       	ldd	r19, Y+13	; 0x0d
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <MDIO_voidSetPinValue+0x68>
     e10:	77 c0       	rjmp	.+238    	; 0xf00 <MDIO_voidSetPinValue+0x156>
     e12:	8c 85       	ldd	r24, Y+12	; 0x0c
     e14:	9d 85       	ldd	r25, Y+13	; 0x0d
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	91 05       	cpc	r25, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <MDIO_voidSetPinValue+0x74>
     e1c:	a9 c0       	rjmp	.+338    	; 0xf70 <MDIO_voidSetPinValue+0x1c6>
     e1e:	df c0       	rjmp	.+446    	; 0xfde <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_Value)
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3b 87       	std	Y+11, r19	; 0x0b
     e28:	2a 87       	std	Y+10, r18	; 0x0a
     e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	31 f0       	breq	.+12     	; 0xe3e <MDIO_voidSetPinValue+0x94>
     e32:	2a 85       	ldd	r18, Y+10	; 0x0a
     e34:	3b 85       	ldd	r19, Y+11	; 0x0b
     e36:	21 30       	cpi	r18, 0x01	; 1
     e38:	31 05       	cpc	r19, r1
     e3a:	b1 f0       	breq	.+44     	; 0xe68 <MDIO_voidSetPinValue+0xbe>
     e3c:	d0 c0       	rjmp	.+416    	; 0xfde <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
     e3e:	ab e3       	ldi	r26, 0x3B	; 59
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	eb e3       	ldi	r30, 0x3B	; 59
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <MDIO_voidSetPinValue+0xb2>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <MDIO_voidSetPinValue+0xae>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	bb c0       	rjmp	.+374    	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <MDIO_voidSetPinValue+0xdc>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <MDIO_voidSetPinValue+0xd8>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	a7 c0       	rjmp	.+334    	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTB:
			switch (A_Value)
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	39 87       	std	Y+9, r19	; 0x09
     e98:	28 87       	std	Y+8, r18	; 0x08
     e9a:	88 85       	ldd	r24, Y+8	; 0x08
     e9c:	99 85       	ldd	r25, Y+9	; 0x09
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	31 f0       	breq	.+12     	; 0xeae <MDIO_voidSetPinValue+0x104>
     ea2:	28 85       	ldd	r18, Y+8	; 0x08
     ea4:	39 85       	ldd	r19, Y+9	; 0x09
     ea6:	21 30       	cpi	r18, 0x01	; 1
     ea8:	31 05       	cpc	r19, r1
     eaa:	b1 f0       	breq	.+44     	; 0xed8 <MDIO_voidSetPinValue+0x12e>
     eac:	98 c0       	rjmp	.+304    	; 0xfde <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_pinID);
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <MDIO_voidSetPinValue+0x122>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <MDIO_voidSetPinValue+0x11e>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	83 c0       	rjmp	.+262    	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_pinID);
     ed8:	a8 e3       	ldi	r26, 0x38	; 56
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e3       	ldi	r30, 0x38	; 56
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_voidSetPinValue+0x14c>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_voidSetPinValue+0x148>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	6f c0       	rjmp	.+222    	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTC:
			switch (A_Value)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3f 83       	std	Y+7, r19	; 0x07
     f08:	2e 83       	std	Y+6, r18	; 0x06
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	31 f0       	breq	.+12     	; 0xf1e <MDIO_voidSetPinValue+0x174>
     f12:	2e 81       	ldd	r18, Y+6	; 0x06
     f14:	3f 81       	ldd	r19, Y+7	; 0x07
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	31 05       	cpc	r19, r1
     f1a:	b1 f0       	breq	.+44     	; 0xf48 <MDIO_voidSetPinValue+0x19e>
     f1c:	60 c0       	rjmp	.+192    	; 0xfde <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_pinID);
     f1e:	a5 e3       	ldi	r26, 0x35	; 53
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e3       	ldi	r30, 0x35	; 53
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <MDIO_voidSetPinValue+0x192>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <MDIO_voidSetPinValue+0x18e>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	4b c0       	rjmp	.+150    	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_pinID);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <MDIO_voidSetPinValue+0x1bc>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <MDIO_voidSetPinValue+0x1b8>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	37 c0       	rjmp	.+110    	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
		case DIO_PORTD:
			switch (A_Value)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3d 83       	std	Y+5, r19	; 0x05
     f78:	2c 83       	std	Y+4, r18	; 0x04
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	31 f0       	breq	.+12     	; 0xf8e <MDIO_voidSetPinValue+0x1e4>
     f82:	2c 81       	ldd	r18, Y+4	; 0x04
     f84:	3d 81       	ldd	r19, Y+5	; 0x05
     f86:	21 30       	cpi	r18, 0x01	; 1
     f88:	31 05       	cpc	r19, r1
     f8a:	b1 f0       	breq	.+44     	; 0xfb8 <MDIO_voidSetPinValue+0x20e>
     f8c:	28 c0       	rjmp	.+80     	; 0xfde <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_pinID);
     f8e:	a2 e3       	ldi	r26, 0x32	; 50
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <MDIO_voidSetPinValue+0x202>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <MDIO_voidSetPinValue+0x1fe>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	13 c0       	rjmp	.+38     	; 0xfde <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_pinID);
     fb8:	a2 e3       	ldi	r26, 0x32	; 50
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e2 e3       	ldi	r30, 0x32	; 50
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <MDIO_voidSetPinValue+0x22c>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <MDIO_voidSetPinValue+0x228>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     fde:	2d 96       	adiw	r28, 0x0d	; 13
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <MDIO_GetPinValue+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <MDIO_GetPinValue+0x8>
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	8a 83       	std	Y+2, r24	; 0x02
    1000:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_Value;
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= DIO_PIN7) )
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	08 f0       	brcs	.+2      	; 0x100a <MDIO_GetPinValue+0x1a>
    1008:	6b c0       	rjmp	.+214    	; 0x10e0 <MDIO_GetPinValue+0xf0>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	08 f0       	brcs	.+2      	; 0x1012 <MDIO_GetPinValue+0x22>
    1010:	67 c0       	rjmp	.+206    	; 0x10e0 <MDIO_GetPinValue+0xf0>
	{
		switch (A_portID)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	4c 81       	ldd	r20, Y+4	; 0x04
    101e:	5d 81       	ldd	r21, Y+5	; 0x05
    1020:	41 30       	cpi	r20, 0x01	; 1
    1022:	51 05       	cpc	r21, r1
    1024:	41 f1       	breq	.+80     	; 0x1076 <MDIO_GetPinValue+0x86>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	91 05       	cpc	r25, r1
    102e:	34 f4       	brge	.+12     	; 0x103c <MDIO_GetPinValue+0x4c>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	61 f0       	breq	.+24     	; 0x1052 <MDIO_GetPinValue+0x62>
    103a:	52 c0       	rjmp	.+164    	; 0x10e0 <MDIO_GetPinValue+0xf0>
    103c:	4c 81       	ldd	r20, Y+4	; 0x04
    103e:	5d 81       	ldd	r21, Y+5	; 0x05
    1040:	42 30       	cpi	r20, 0x02	; 2
    1042:	51 05       	cpc	r21, r1
    1044:	51 f1       	breq	.+84     	; 0x109a <MDIO_GetPinValue+0xaa>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	b9 f1       	breq	.+110    	; 0x10be <MDIO_GetPinValue+0xce>
    1050:	47 c0       	rjmp	.+142    	; 0x10e0 <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_Value = GET_BIT(PINA_REG,A_pinID);
    1052:	e9 e3       	ldi	r30, 0x39	; 57
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <MDIO_GetPinValue+0x7a>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <MDIO_GetPinValue+0x76>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	35 c0       	rjmp	.+106    	; 0x10e0 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_Value = GET_BIT(PINB_REG,A_pinID);
    1076:	e6 e3       	ldi	r30, 0x36	; 54
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <MDIO_GetPinValue+0x9e>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <MDIO_GetPinValue+0x9a>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	23 c0       	rjmp	.+70     	; 0x10e0 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_Value = GET_BIT(PINC_REG,A_pinID);
    109a:	e3 e3       	ldi	r30, 0x33	; 51
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <MDIO_GetPinValue+0xc2>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <MDIO_GetPinValue+0xbe>
    10b6:	ca 01       	movw	r24, r20
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	11 c0       	rjmp	.+34     	; 0x10e0 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_Value = GET_BIT(PIND_REG,A_pinID);
    10be:	e0 e3       	ldi	r30, 0x30	; 48
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <MDIO_GetPinValue+0xe6>
    10d2:	55 95       	asr	r21
    10d4:	47 95       	ror	r20
    10d6:	8a 95       	dec	r24
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <MDIO_GetPinValue+0xe2>
    10da:	ca 01       	movw	r24, r20
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return local_Value;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_portID, DIO_PIN_e A_pinID)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <MDIO_voidTogglePinValue+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <MDIO_voidTogglePinValue+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_portID <= DIO_PORTD) && (A_pinID <= DIO_PIN7) )
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	08 f0       	brcs	.+2      	; 0x110a <MDIO_voidTogglePinValue+0x18>
    1108:	72 c0       	rjmp	.+228    	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	08 f0       	brcs	.+2      	; 0x1112 <MDIO_voidTogglePinValue+0x20>
    1110:	6e c0       	rjmp	.+220    	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_portID)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3c 83       	std	Y+4, r19	; 0x04
    111a:	2b 83       	std	Y+3, r18	; 0x03
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	49 f1       	breq	.+82     	; 0x1178 <MDIO_voidTogglePinValue+0x86>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <MDIO_voidTogglePinValue+0x48>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f0       	breq	.+24     	; 0x1150 <MDIO_voidTogglePinValue+0x5e>
    1138:	5a c0       	rjmp	.+180    	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
    113a:	2b 81       	ldd	r18, Y+3	; 0x03
    113c:	3c 81       	ldd	r19, Y+4	; 0x04
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	71 f1       	breq	.+92     	; 0x11a0 <MDIO_voidTogglePinValue+0xae>
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	e9 f1       	breq	.+122    	; 0x11c8 <MDIO_voidTogglePinValue+0xd6>
    114e:	4f c0       	rjmp	.+158    	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_pinID);
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <MDIO_voidTogglePinValue+0x7c>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <MDIO_voidTogglePinValue+0x78>
    1172:	84 27       	eor	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	3b c0       	rjmp	.+118    	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_pinID);
    1178:	a8 e3       	ldi	r26, 0x38	; 56
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e8 e3       	ldi	r30, 0x38	; 56
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <MDIO_voidTogglePinValue+0xa4>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <MDIO_voidTogglePinValue+0xa0>
    119a:	84 27       	eor	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	27 c0       	rjmp	.+78     	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_pinID);
    11a0:	a5 e3       	ldi	r26, 0x35	; 53
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e5 e3       	ldi	r30, 0x35	; 53
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <MDIO_voidTogglePinValue+0xcc>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <MDIO_voidTogglePinValue+0xc8>
    11c2:	84 27       	eor	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	13 c0       	rjmp	.+38     	; 0x11ee <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_pinID);
    11c8:	a2 e3       	ldi	r26, 0x32	; 50
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e2 e3       	ldi	r30, 0x32	; 50
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <MDIO_voidTogglePinValue+0xf4>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <MDIO_voidTogglePinValue+0xf0>
    11ea:	84 27       	eor	r24, r20
    11ec:	8c 93       	st	X, r24
			break;
		}
	}
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (DIO_PORT_e A_portID, u8 A_u8Direction)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <MDIO_voidSetPortDirection+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <MDIO_voidSetPortDirection+0x8>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_portID <= DIO_PORTD) )
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	90 f5       	brcc	.+100    	; 0x1276 <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_portID)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3c 83       	std	Y+4, r19	; 0x04
    121a:	2b 83       	std	Y+3, r18	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	d1 f0       	breq	.+52     	; 0x125a <MDIO_voidSetPortDirection+0x5e>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	2c f4       	brge	.+10     	; 0x123a <MDIO_voidSetPortDirection+0x3e>
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	61 f0       	breq	.+24     	; 0x1250 <MDIO_voidSetPortDirection+0x54>
    1238:	1e c0       	rjmp	.+60     	; 0x1276 <MDIO_voidSetPortDirection+0x7a>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <MDIO_voidSetPortDirection+0x68>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	81 f0       	breq	.+32     	; 0x126e <MDIO_voidSetPortDirection+0x72>
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    1250:	ea e3       	ldi	r30, 0x3A	; 58
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	0e c0       	rjmp	.+28     	; 0x1276 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    125a:	e7 e3       	ldi	r30, 0x37	; 55
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    1264:	e4 e3       	ldi	r30, 0x34	; 52
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
			break;
		}
	}
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_portID, u8 A_u8Value)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <MDIO_voidSetPortValue+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <MDIO_voidSetPortValue+0x8>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_portID <= DIO_PORTD) )
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	90 f5       	brcc	.+100    	; 0x12fe <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_portID)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	2b 83       	std	Y+3, r18	; 0x03
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	d1 f0       	breq	.+52     	; 0x12e2 <MDIO_voidSetPortValue+0x5e>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <MDIO_voidSetPortValue+0x3e>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 f0       	breq	.+24     	; 0x12d8 <MDIO_voidSetPortValue+0x54>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <MDIO_voidSetPortValue+0x7a>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <MDIO_voidSetPortValue+0x68>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <MDIO_voidSetPortValue+0x72>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    12e2:	e8 e3       	ldi	r30, 0x38	; 56
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    12f6:	e2 e3       	ldi	r30, 0x32	; 50
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <MDIO_voidInit>:


void MDIO_voidInit()
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	87 e0       	ldi	r24, 0x07	; 7
    131a:	80 83       	st	Z, r24
						PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,
						PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,
						PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,
    131c:	e7 e3       	ldi	r30, 0x37	; 55
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	88 e0       	ldi	r24, 0x08	; 8
    1322:	80 83       	st	Z, r24
						PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,
						PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,
						PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,
    1324:	e4 e3       	ldi	r30, 0x34	; 52
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	10 82       	st	Z, r1
						PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,
						PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,
						PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	80 83       	st	Z, r24
						PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION,
						PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,
						PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);

	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	10 82       	st	Z, r1
						 PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,
						 PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,
						 PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	10 82       	st	Z, r1
						 PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,
						 PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,
						 PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
						 PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,
						 PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,
						 PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	10 82       	st	Z, r1
						 PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,
						 PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,
						 PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <H_voidRegister>:

u8 Global_AccountCounter = 0;
Account accounts[20];

void H_voidRegister()
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	e3 97       	sbiw	r28, 0x33	; 51
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    if (Global_AccountCounter < 10)
    1368:	80 91 02 05 	lds	r24, 0x0502
    136c:	8a 30       	cpi	r24, 0x0A	; 10
    136e:	08 f0       	brcs	.+2      	; 0x1372 <H_voidRegister+0x22>
    1370:	c7 c0       	rjmp	.+398    	; 0x1500 <H_voidRegister+0x1b0>
    {
        Account newAccount;
        u8 spaceCounter = 0;
    1372:	1d 82       	std	Y+5, r1	; 0x05
        while (1)
        {
            spaceCounter = 0;
    1374:	1d 82       	std	Y+5, r1	; 0x05
            MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Username must not include spaces)\n(Note: Press # when you are done)\n");
    1376:	80 e6       	ldi	r24, 0x60	; 96
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
            MUART_voidClearBuffer();
    137e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
            MUART_voidClearBuffer();
    1382:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
            for (u8 i = 0; i < 20; i++)
    1386:	1c 82       	std	Y+4, r1	; 0x04
    1388:	24 c0       	rjmp	.+72     	; 0x13d2 <H_voidRegister+0x82>
            {
                newAccount.username[i] = MUART_u8ReadByteSyncBlocking();
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	08 2f       	mov	r16, r24
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    1394:	28 2f       	mov	r18, r24
    1396:	ce 01       	movw	r24, r28
    1398:	06 96       	adiw	r24, 0x06	; 6
    139a:	fc 01       	movw	r30, r24
    139c:	e0 0f       	add	r30, r16
    139e:	f1 1f       	adc	r31, r17
    13a0:	20 83       	st	Z, r18
                if (newAccount.username[i] == '#')
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	ce 01       	movw	r24, r28
    13aa:	06 96       	adiw	r24, 0x06	; 6
    13ac:	fc 01       	movw	r30, r24
    13ae:	e2 0f       	add	r30, r18
    13b0:	f3 1f       	adc	r31, r19
    13b2:	80 81       	ld	r24, Z
    13b4:	83 32       	cpi	r24, 0x23	; 35
    13b6:	51 f4       	brne	.+20     	; 0x13cc <H_voidRegister+0x7c>
                {
                    newAccount.username[i] = '\0';
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	ce 01       	movw	r24, r28
    13c0:	06 96       	adiw	r24, 0x06	; 6
    13c2:	fc 01       	movw	r30, r24
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	10 82       	st	Z, r1
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <H_voidRegister+0x88>
        {
            spaceCounter = 0;
            MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Username must not include spaces)\n(Note: Press # when you are done)\n");
            MUART_voidClearBuffer();
            MUART_voidClearBuffer();
            for (u8 i = 0; i < 20; i++)
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	84 31       	cpi	r24, 0x14	; 20
    13d6:	c8 f2       	brcs	.-78     	; 0x138a <H_voidRegister+0x3a>
                {
                    newAccount.username[i] = '\0';
                    break;
                }
            }
            for (u8 i = 0; newAccount.username[i] != '\0'; i++)
    13d8:	1b 82       	std	Y+3, r1	; 0x03
    13da:	11 c0       	rjmp	.+34     	; 0x13fe <H_voidRegister+0xae>
            {
                if (newAccount.username[i] == ' ')
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	ce 01       	movw	r24, r28
    13e4:	06 96       	adiw	r24, 0x06	; 6
    13e6:	fc 01       	movw	r30, r24
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	80 81       	ld	r24, Z
    13ee:	80 32       	cpi	r24, 0x20	; 32
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <H_voidRegister+0xa8>
                {
                    spaceCounter++;
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	8f 5f       	subi	r24, 0xFF	; 255
    13f6:	8d 83       	std	Y+5, r24	; 0x05
                {
                    newAccount.username[i] = '\0';
                    break;
                }
            }
            for (u8 i = 0; newAccount.username[i] != '\0'; i++)
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	8f 5f       	subi	r24, 0xFF	; 255
    13fc:	8b 83       	std	Y+3, r24	; 0x03
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	ce 01       	movw	r24, r28
    1406:	06 96       	adiw	r24, 0x06	; 6
    1408:	fc 01       	movw	r30, r24
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	80 81       	ld	r24, Z
    1410:	88 23       	and	r24, r24
    1412:	21 f7       	brne	.-56     	; 0x13dc <H_voidRegister+0x8c>
                if (newAccount.username[i] == ' ')
                {
                    spaceCounter++;
                }
            }
            if (spaceCounter == 0)
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	88 23       	and	r24, r24
    1418:	09 f0       	breq	.+2      	; 0x141c <H_voidRegister+0xcc>
    141a:	6d c0       	rjmp	.+218    	; 0x14f6 <H_voidRegister+0x1a6>
            {
                MUART_voidSendStringSyncNonBlocking("\nEnter your Password\n(Note: Press # when you are done)\n");
    141c:	81 ec       	ldi	r24, 0xC1	; 193
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
                MUART_voidClearBuffer();
    1424:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
                MUART_voidClearBuffer();
    1428:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
                for (u8 i = 0; i < 20; i++)
    142c:	1a 82       	std	Y+2, r1	; 0x02
    142e:	24 c0       	rjmp	.+72     	; 0x1478 <H_voidRegister+0x128>
                {
                    newAccount.password[i] = MUART_u8ReadByteSyncBlocking();
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	08 2f       	mov	r16, r24
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    143a:	28 2f       	mov	r18, r24
    143c:	ce 01       	movw	r24, r28
    143e:	4a 96       	adiw	r24, 0x1a	; 26
    1440:	fc 01       	movw	r30, r24
    1442:	e0 0f       	add	r30, r16
    1444:	f1 1f       	adc	r31, r17
    1446:	20 83       	st	Z, r18
                    if (newAccount.password[i] == '#')
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	ce 01       	movw	r24, r28
    1450:	4a 96       	adiw	r24, 0x1a	; 26
    1452:	fc 01       	movw	r30, r24
    1454:	e2 0f       	add	r30, r18
    1456:	f3 1f       	adc	r31, r19
    1458:	80 81       	ld	r24, Z
    145a:	83 32       	cpi	r24, 0x23	; 35
    145c:	51 f4       	brne	.+20     	; 0x1472 <H_voidRegister+0x122>
                    {
                        newAccount.password[i] = '\0';
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	ce 01       	movw	r24, r28
    1466:	4a 96       	adiw	r24, 0x1a	; 26
    1468:	fc 01       	movw	r30, r24
    146a:	e2 0f       	add	r30, r18
    146c:	f3 1f       	adc	r31, r19
    146e:	10 82       	st	Z, r1
    1470:	06 c0       	rjmp	.+12     	; 0x147e <H_voidRegister+0x12e>
            if (spaceCounter == 0)
            {
                MUART_voidSendStringSyncNonBlocking("\nEnter your Password\n(Note: Press # when you are done)\n");
                MUART_voidClearBuffer();
                MUART_voidClearBuffer();
                for (u8 i = 0; i < 20; i++)
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	8f 5f       	subi	r24, 0xFF	; 255
    1476:	8a 83       	std	Y+2, r24	; 0x02
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	84 31       	cpi	r24, 0x14	; 20
    147c:	c8 f2       	brcs	.-78     	; 0x1430 <H_voidRegister+0xe0>
                    {
                        newAccount.password[i] = '\0';
                        break;
                    }
                }
                accounts[Global_AccountCounter++] = newAccount;
    147e:	20 91 02 05 	lds	r18, 0x0502
    1482:	2e a7       	std	Y+46, r18	; 0x2e
    1484:	ee a5       	ldd	r30, Y+46	; 0x2e
    1486:	8e 2f       	mov	r24, r30
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	9c 01       	movw	r18, r24
    1498:	22 0f       	add	r18, r18
    149a:	33 1f       	adc	r19, r19
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	82 0f       	add	r24, r18
    14a2:	93 1f       	adc	r25, r19
    14a4:	83 5f       	subi	r24, 0xF3	; 243
    14a6:	9a 4f       	sbci	r25, 0xFA	; 250
    14a8:	98 ab       	std	Y+48, r25	; 0x30
    14aa:	8f a7       	std	Y+47, r24	; 0x2f
    14ac:	ce 01       	movw	r24, r28
    14ae:	06 96       	adiw	r24, 0x06	; 6
    14b0:	9a ab       	std	Y+50, r25	; 0x32
    14b2:	89 ab       	std	Y+49, r24	; 0x31
    14b4:	98 e2       	ldi	r25, 0x28	; 40
    14b6:	9b ab       	std	Y+51, r25	; 0x33
    14b8:	e9 a9       	ldd	r30, Y+49	; 0x31
    14ba:	fa a9       	ldd	r31, Y+50	; 0x32
    14bc:	00 80       	ld	r0, Z
    14be:	89 a9       	ldd	r24, Y+49	; 0x31
    14c0:	9a a9       	ldd	r25, Y+50	; 0x32
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	9a ab       	std	Y+50, r25	; 0x32
    14c6:	89 ab       	std	Y+49, r24	; 0x31
    14c8:	ef a5       	ldd	r30, Y+47	; 0x2f
    14ca:	f8 a9       	ldd	r31, Y+48	; 0x30
    14cc:	00 82       	st	Z, r0
    14ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d0:	98 a9       	ldd	r25, Y+48	; 0x30
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	98 ab       	std	Y+48, r25	; 0x30
    14d6:	8f a7       	std	Y+47, r24	; 0x2f
    14d8:	9b a9       	ldd	r25, Y+51	; 0x33
    14da:	91 50       	subi	r25, 0x01	; 1
    14dc:	9b ab       	std	Y+51, r25	; 0x33
    14de:	eb a9       	ldd	r30, Y+51	; 0x33
    14e0:	ee 23       	and	r30, r30
    14e2:	51 f7       	brne	.-44     	; 0x14b8 <H_voidRegister+0x168>
    14e4:	8e a5       	ldd	r24, Y+46	; 0x2e
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	80 93 02 05 	sts	0x0502, r24
                MUART_voidSendStringSyncNonBlocking("Account Has been Registered Successfully\n");
    14ec:	89 ef       	ldi	r24, 0xF9	; 249
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    14f4:	1c c0       	rjmp	.+56     	; 0x152e <H_voidRegister+0x1de>
                break;
            }
            else
            {
                MUART_voidSendStringSyncNonBlocking("Username must not include spaces\nPlease Try Again");
    14f6:	83 e2       	ldi	r24, 0x23	; 35
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    14fe:	3a cf       	rjmp	.-396    	; 0x1374 <H_voidRegister+0x24>
            }
        }
    }
    else
    {
        MUART_voidSendStringSyncNonBlocking("Maximum number of accounts (10) reached.\n");
    1500:	85 e5       	ldi	r24, 0x55	; 85
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
        MUART_voidSendStringSyncNonBlocking("Would you like to replace an existing account? (Y/N)\n");
    1508:	8f e7       	ldi	r24, 0x7F	; 127
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
        MUART_voidClearBuffer();
    1510:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
        MUART_voidClearBuffer();
    1514:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
        u8 choice = MUART_u8ReadByteSyncBlocking();
    1518:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    151c:	89 83       	std	Y+1, r24	; 0x01
        if (choice == 'Y' || choice == 'y')
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	89 35       	cpi	r24, 0x59	; 89
    1522:	19 f0       	breq	.+6      	; 0x152a <H_voidRegister+0x1da>
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	89 37       	cpi	r24, 0x79	; 121
    1528:	11 f4       	brne	.+4      	; 0x152e <H_voidRegister+0x1de>
        {
            H_voidReplaceAccount();
    152a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <H_voidReplaceAccount>
        }
    }
    H_voidHomePageLogOrReg();
    152e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <H_voidHomePageLogOrReg>
}
    1532:	e3 96       	adiw	r28, 0x33	; 51
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <H_voidReplaceAccount>:

void H_voidReplaceAccount()
{
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	c6 54       	subi	r28, 0x46	; 70
    1556:	d0 40       	sbci	r29, 0x00	; 0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    MUART_voidSendStringSyncNonBlocking("Enter the username of the account you want to replace:\n");
    1562:	85 eb       	ldi	r24, 0xB5	; 181
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    u8 usernameToReplace[20];
    MUART_voidClearBuffer();
    156a:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
    MUART_voidClearBuffer();
    156e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
    for (u8 i = 0; i < 20; i++)
    1572:	1c 82       	std	Y+4, r1	; 0x04
    1574:	24 c0       	rjmp	.+72     	; 0x15be <H_voidReplaceAccount+0x76>
    {
        usernameToReplace[i] = MUART_u8ReadByteSyncBlocking();
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	08 2f       	mov	r16, r24
    157a:	10 e0       	ldi	r17, 0x00	; 0
    157c:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    1580:	28 2f       	mov	r18, r24
    1582:	ce 01       	movw	r24, r28
    1584:	06 96       	adiw	r24, 0x06	; 6
    1586:	fc 01       	movw	r30, r24
    1588:	e0 0f       	add	r30, r16
    158a:	f1 1f       	adc	r31, r17
    158c:	20 83       	st	Z, r18
        if (usernameToReplace[i] == '#')
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	ce 01       	movw	r24, r28
    1596:	06 96       	adiw	r24, 0x06	; 6
    1598:	fc 01       	movw	r30, r24
    159a:	e2 0f       	add	r30, r18
    159c:	f3 1f       	adc	r31, r19
    159e:	80 81       	ld	r24, Z
    15a0:	83 32       	cpi	r24, 0x23	; 35
    15a2:	51 f4       	brne	.+20     	; 0x15b8 <H_voidReplaceAccount+0x70>
        {
            usernameToReplace[i] = '\0';
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	ce 01       	movw	r24, r28
    15ac:	06 96       	adiw	r24, 0x06	; 6
    15ae:	fc 01       	movw	r30, r24
    15b0:	e2 0f       	add	r30, r18
    15b2:	f3 1f       	adc	r31, r19
    15b4:	10 82       	st	Z, r1
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <H_voidReplaceAccount+0x7c>
{
    MUART_voidSendStringSyncNonBlocking("Enter the username of the account you want to replace:\n");
    u8 usernameToReplace[20];
    MUART_voidClearBuffer();
    MUART_voidClearBuffer();
    for (u8 i = 0; i < 20; i++)
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	8c 83       	std	Y+4, r24	; 0x04
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	84 31       	cpi	r24, 0x14	; 20
    15c2:	c8 f2       	brcs	.-78     	; 0x1576 <H_voidReplaceAccount+0x2e>
            usernameToReplace[i] = '\0';
            break;
        }
    }

    u8 found = 0;
    15c4:	1d 82       	std	Y+5, r1	; 0x05
    for (u8 i = 0; i < Global_AccountCounter; i++)
    15c6:	1b 82       	std	Y+3, r1	; 0x03
    15c8:	cf c0       	rjmp	.+414    	; 0x1768 <H_voidReplaceAccount+0x220>
    {
        if (strcmp(accounts[i].username, usernameToReplace) == 0)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	9c 01       	movw	r18, r24
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	22 0f       	add	r18, r18
    15e4:	33 1f       	adc	r19, r19
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	83 5f       	subi	r24, 0xF3	; 243
    15ec:	9a 4f       	sbci	r25, 0xFA	; 250
    15ee:	9e 01       	movw	r18, r28
    15f0:	2a 5f       	subi	r18, 0xFA	; 250
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	b9 01       	movw	r22, r18
    15f6:	0e 94 11 15 	call	0x2a22	; 0x2a22 <strcmp>
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	09 f0       	breq	.+2      	; 0x1600 <H_voidReplaceAccount+0xb8>
    15fe:	b1 c0       	rjmp	.+354    	; 0x1762 <H_voidReplaceAccount+0x21a>
        {
            found = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	8d 83       	std	Y+5, r24	; 0x05
            Account newAccount;
            MUART_voidSendStringSyncNonBlocking("Enter the new Username:\n");
    1604:	8d ee       	ldi	r24, 0xED	; 237
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
            MUART_voidClearBuffer();
    160c:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
            MUART_voidClearBuffer();
    1610:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
            for (u8 j = 0; j < 20; j++)
    1614:	1a 82       	std	Y+2, r1	; 0x02
    1616:	24 c0       	rjmp	.+72     	; 0x1660 <H_voidReplaceAccount+0x118>
            {
                newAccount.username[j] = MUART_u8ReadByteSyncBlocking();
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	08 2f       	mov	r16, r24
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    1622:	28 2f       	mov	r18, r24
    1624:	ce 01       	movw	r24, r28
    1626:	4a 96       	adiw	r24, 0x1a	; 26
    1628:	fc 01       	movw	r30, r24
    162a:	e0 0f       	add	r30, r16
    162c:	f1 1f       	adc	r31, r17
    162e:	20 83       	st	Z, r18
                if (newAccount.username[j] == '#')
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	ce 01       	movw	r24, r28
    1638:	4a 96       	adiw	r24, 0x1a	; 26
    163a:	fc 01       	movw	r30, r24
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	80 81       	ld	r24, Z
    1642:	83 32       	cpi	r24, 0x23	; 35
    1644:	51 f4       	brne	.+20     	; 0x165a <H_voidReplaceAccount+0x112>
                {
                    newAccount.username[j] = '\0';
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	ce 01       	movw	r24, r28
    164e:	4a 96       	adiw	r24, 0x1a	; 26
    1650:	fc 01       	movw	r30, r24
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	10 82       	st	Z, r1
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <H_voidReplaceAccount+0x11e>
            found = 1;
            Account newAccount;
            MUART_voidSendStringSyncNonBlocking("Enter the new Username:\n");
            MUART_voidClearBuffer();
            MUART_voidClearBuffer();
            for (u8 j = 0; j < 20; j++)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	84 31       	cpi	r24, 0x14	; 20
    1664:	c8 f2       	brcs	.-78     	; 0x1618 <H_voidReplaceAccount+0xd0>
                {
                    newAccount.username[j] = '\0';
                    break;
                }
            }
            MUART_voidSendStringSyncNonBlocking("\nEnter the new Password:\n");
    1666:	86 e0       	ldi	r24, 0x06	; 6
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
            MUART_voidClearBuffer();
    166e:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
            MUART_voidClearBuffer();
    1672:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
            for (u8 j = 0; j < 20; j++)
    1676:	19 82       	std	Y+1, r1	; 0x01
    1678:	24 c0       	rjmp	.+72     	; 0x16c2 <H_voidReplaceAccount+0x17a>
            {
                newAccount.password[j] = MUART_u8ReadByteSyncBlocking();
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	08 2f       	mov	r16, r24
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    1684:	28 2f       	mov	r18, r24
    1686:	ce 01       	movw	r24, r28
    1688:	8e 96       	adiw	r24, 0x2e	; 46
    168a:	fc 01       	movw	r30, r24
    168c:	e0 0f       	add	r30, r16
    168e:	f1 1f       	adc	r31, r17
    1690:	20 83       	st	Z, r18
                if (newAccount.password[j] == '#')
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	ce 01       	movw	r24, r28
    169a:	8e 96       	adiw	r24, 0x2e	; 46
    169c:	fc 01       	movw	r30, r24
    169e:	e2 0f       	add	r30, r18
    16a0:	f3 1f       	adc	r31, r19
    16a2:	80 81       	ld	r24, Z
    16a4:	83 32       	cpi	r24, 0x23	; 35
    16a6:	51 f4       	brne	.+20     	; 0x16bc <H_voidReplaceAccount+0x174>
                {
                    newAccount.password[j] = '\0';
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	ce 01       	movw	r24, r28
    16b0:	8e 96       	adiw	r24, 0x2e	; 46
    16b2:	fc 01       	movw	r30, r24
    16b4:	e2 0f       	add	r30, r18
    16b6:	f3 1f       	adc	r31, r19
    16b8:	10 82       	st	Z, r1
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <H_voidReplaceAccount+0x180>
                }
            }
            MUART_voidSendStringSyncNonBlocking("\nEnter the new Password:\n");
            MUART_voidClearBuffer();
            MUART_voidClearBuffer();
            for (u8 j = 0; j < 20; j++)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	84 31       	cpi	r24, 0x14	; 20
    16c6:	c8 f2       	brcs	.-78     	; 0x167a <H_voidReplaceAccount+0x132>
                    newAccount.password[j] = '\0';
                    break;
                }

            }
            accounts[i] = newAccount;
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	9c 01       	movw	r18, r24
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	83 5f       	subi	r24, 0xF3	; 243
    16ea:	9a 4f       	sbci	r25, 0xFA	; 250
    16ec:	24 96       	adiw	r28, 0x04	; 4
    16ee:	9f af       	std	Y+63, r25	; 0x3f
    16f0:	8e af       	std	Y+62, r24	; 0x3e
    16f2:	24 97       	sbiw	r28, 0x04	; 4
    16f4:	ce 01       	movw	r24, r28
    16f6:	4a 96       	adiw	r24, 0x1a	; 26
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	9f af       	std	Y+63, r25	; 0x3f
    16fc:	8e af       	std	Y+62, r24	; 0x3e
    16fe:	26 97       	sbiw	r28, 0x06	; 6
    1700:	98 e2       	ldi	r25, 0x28	; 40
    1702:	27 96       	adiw	r28, 0x07	; 7
    1704:	9f af       	std	Y+63, r25	; 0x3f
    1706:	27 97       	sbiw	r28, 0x07	; 7
    1708:	26 96       	adiw	r28, 0x06	; 6
    170a:	ee ad       	ldd	r30, Y+62	; 0x3e
    170c:	ff ad       	ldd	r31, Y+63	; 0x3f
    170e:	26 97       	sbiw	r28, 0x06	; 6
    1710:	00 80       	ld	r0, Z
    1712:	26 96       	adiw	r28, 0x06	; 6
    1714:	8e ad       	ldd	r24, Y+62	; 0x3e
    1716:	9f ad       	ldd	r25, Y+63	; 0x3f
    1718:	26 97       	sbiw	r28, 0x06	; 6
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	26 96       	adiw	r28, 0x06	; 6
    171e:	9f af       	std	Y+63, r25	; 0x3f
    1720:	8e af       	std	Y+62, r24	; 0x3e
    1722:	26 97       	sbiw	r28, 0x06	; 6
    1724:	24 96       	adiw	r28, 0x04	; 4
    1726:	ee ad       	ldd	r30, Y+62	; 0x3e
    1728:	ff ad       	ldd	r31, Y+63	; 0x3f
    172a:	24 97       	sbiw	r28, 0x04	; 4
    172c:	00 82       	st	Z, r0
    172e:	24 96       	adiw	r28, 0x04	; 4
    1730:	8e ad       	ldd	r24, Y+62	; 0x3e
    1732:	9f ad       	ldd	r25, Y+63	; 0x3f
    1734:	24 97       	sbiw	r28, 0x04	; 4
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	24 96       	adiw	r28, 0x04	; 4
    173a:	9f af       	std	Y+63, r25	; 0x3f
    173c:	8e af       	std	Y+62, r24	; 0x3e
    173e:	24 97       	sbiw	r28, 0x04	; 4
    1740:	27 96       	adiw	r28, 0x07	; 7
    1742:	9f ad       	ldd	r25, Y+63	; 0x3f
    1744:	27 97       	sbiw	r28, 0x07	; 7
    1746:	91 50       	subi	r25, 0x01	; 1
    1748:	27 96       	adiw	r28, 0x07	; 7
    174a:	9f af       	std	Y+63, r25	; 0x3f
    174c:	27 97       	sbiw	r28, 0x07	; 7
    174e:	27 96       	adiw	r28, 0x07	; 7
    1750:	ef ad       	ldd	r30, Y+63	; 0x3f
    1752:	27 97       	sbiw	r28, 0x07	; 7
    1754:	ee 23       	and	r30, r30
    1756:	c1 f6       	brne	.-80     	; 0x1708 <H_voidReplaceAccount+0x1c0>
            MUART_voidSendStringSyncNonBlocking("Account has been replaced successfully.\n");
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <H_voidReplaceAccount+0x22c>
            break;
        }
    }

    u8 found = 0;
    for (u8 i = 0; i < Global_AccountCounter; i++)
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	90 91 02 05 	lds	r25, 0x0502
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	89 17       	cp	r24, r25
    1770:	08 f4       	brcc	.+2      	; 0x1774 <H_voidReplaceAccount+0x22c>
    1772:	2b cf       	rjmp	.-426    	; 0x15ca <H_voidReplaceAccount+0x82>
            accounts[i] = newAccount;
            MUART_voidSendStringSyncNonBlocking("Account has been replaced successfully.\n");
            break;
        }
    }
    if (!found)
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	88 23       	and	r24, r24
    1778:	21 f4       	brne	.+8      	; 0x1782 <H_voidReplaceAccount+0x23a>
    {
        MUART_voidSendStringSyncNonBlocking("Account not found.\n");
    177a:	89 e4       	ldi	r24, 0x49	; 73
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    }
    H_voidHomePageLogOrReg();
    1782:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <H_voidHomePageLogOrReg>
}
    1786:	ca 5b       	subi	r28, 0xBA	; 186
    1788:	df 4f       	sbci	r29, 0xFF	; 255
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <H_voidLogIn>:

void H_voidLogIn()
{
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	ae 97       	sbiw	r28, 0x2e	; 46
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    u8 localu8FirstChoice;
    Account loggedInAccount;
    u8 usernameFound = 0;
    17b6:	1d 82       	std	Y+5, r1	; 0x05
    MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Press # when you are done)\n");
    17b8:	8d e5       	ldi	r24, 0x5D	; 93
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    MUART_voidClearBuffer();
    17c0:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
    MUART_voidClearBuffer();
    17c4:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
    for (u8 i = 0; i < 20; i++)
    17c8:	1c 82       	std	Y+4, r1	; 0x04
    17ca:	24 c0       	rjmp	.+72     	; 0x1814 <H_voidLogIn+0x76>
    {
        loggedInAccount.username[i] = MUART_u8ReadByteSyncBlocking();
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	08 2f       	mov	r16, r24
    17d0:	10 e0       	ldi	r17, 0x00	; 0
    17d2:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    17d6:	28 2f       	mov	r18, r24
    17d8:	ce 01       	movw	r24, r28
    17da:	07 96       	adiw	r24, 0x07	; 7
    17dc:	fc 01       	movw	r30, r24
    17de:	e0 0f       	add	r30, r16
    17e0:	f1 1f       	adc	r31, r17
    17e2:	20 83       	st	Z, r18
        if (loggedInAccount.username[i] == '#')
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	07 96       	adiw	r24, 0x07	; 7
    17ee:	fc 01       	movw	r30, r24
    17f0:	e2 0f       	add	r30, r18
    17f2:	f3 1f       	adc	r31, r19
    17f4:	80 81       	ld	r24, Z
    17f6:	83 32       	cpi	r24, 0x23	; 35
    17f8:	51 f4       	brne	.+20     	; 0x180e <H_voidLogIn+0x70>
        {
            loggedInAccount.username[i] = '\0';
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	ce 01       	movw	r24, r28
    1802:	07 96       	adiw	r24, 0x07	; 7
    1804:	fc 01       	movw	r30, r24
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	10 82       	st	Z, r1
    180c:	06 c0       	rjmp	.+12     	; 0x181a <H_voidLogIn+0x7c>
    Account loggedInAccount;
    u8 usernameFound = 0;
    MUART_voidSendStringSyncNonBlocking("Enter your Username:\n(Note: Press # when you are done)\n");
    MUART_voidClearBuffer();
    MUART_voidClearBuffer();
    for (u8 i = 0; i < 20; i++)
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	8c 83       	std	Y+4, r24	; 0x04
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	84 31       	cpi	r24, 0x14	; 20
    1818:	c8 f2       	brcs	.-78     	; 0x17cc <H_voidLogIn+0x2e>
        {
            loggedInAccount.username[i] = '\0';
            break;
        }
    }
    for (u8 i = 0; i < Global_AccountCounter; i++)
    181a:	1b 82       	std	Y+3, r1	; 0x03
    181c:	9d c0       	rjmp	.+314    	; 0x1958 <H_voidLogIn+0x1ba>
    {
        if (strcmp(loggedInAccount.username, accounts[i].username) == 0)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	9c 01       	movw	r18, r24
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	22 0f       	add	r18, r18
    1838:	33 1f       	adc	r19, r19
    183a:	82 0f       	add	r24, r18
    183c:	93 1f       	adc	r25, r19
    183e:	9c 01       	movw	r18, r24
    1840:	23 5f       	subi	r18, 0xF3	; 243
    1842:	3a 4f       	sbci	r19, 0xFA	; 250
    1844:	ce 01       	movw	r24, r28
    1846:	07 96       	adiw	r24, 0x07	; 7
    1848:	b9 01       	movw	r22, r18
    184a:	0e 94 11 15 	call	0x2a22	; 0x2a22 <strcmp>
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	09 f0       	breq	.+2      	; 0x1854 <H_voidLogIn+0xb6>
    1852:	7f c0       	rjmp	.+254    	; 0x1952 <H_voidLogIn+0x1b4>
        {
            usernameFound = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	8d 83       	std	Y+5, r24	; 0x05
            u8 attempts = 0;
    1858:	1a 82       	std	Y+2, r1	; 0x02
    185a:	6b c0       	rjmp	.+214    	; 0x1932 <H_voidLogIn+0x194>
            while (attempts < 3)
            {
                MUART_voidSendStringSyncNonBlocking("\nEnter your Password:\n(Note: Press # when you are done)\n");
    185c:	85 e9       	ldi	r24, 0x95	; 149
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
                MUART_voidClearBuffer();
    1864:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
                MUART_voidClearBuffer();
    1868:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
                for (u8 j = 0; j < 20; j++)
    186c:	19 82       	std	Y+1, r1	; 0x01
    186e:	24 c0       	rjmp	.+72     	; 0x18b8 <H_voidLogIn+0x11a>
                {
                    loggedInAccount.password[j] = MUART_u8ReadByteSyncBlocking();
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	08 2f       	mov	r16, r24
    1874:	10 e0       	ldi	r17, 0x00	; 0
    1876:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    187a:	28 2f       	mov	r18, r24
    187c:	ce 01       	movw	r24, r28
    187e:	4b 96       	adiw	r24, 0x1b	; 27
    1880:	fc 01       	movw	r30, r24
    1882:	e0 0f       	add	r30, r16
    1884:	f1 1f       	adc	r31, r17
    1886:	20 83       	st	Z, r18
                    if (loggedInAccount.password[j] == '#')
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	ce 01       	movw	r24, r28
    1890:	4b 96       	adiw	r24, 0x1b	; 27
    1892:	fc 01       	movw	r30, r24
    1894:	e2 0f       	add	r30, r18
    1896:	f3 1f       	adc	r31, r19
    1898:	80 81       	ld	r24, Z
    189a:	83 32       	cpi	r24, 0x23	; 35
    189c:	51 f4       	brne	.+20     	; 0x18b2 <H_voidLogIn+0x114>
                    {
                        loggedInAccount.password[j] = '\0';
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	ce 01       	movw	r24, r28
    18a6:	4b 96       	adiw	r24, 0x1b	; 27
    18a8:	fc 01       	movw	r30, r24
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	10 82       	st	Z, r1
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <H_voidLogIn+0x120>
            while (attempts < 3)
            {
                MUART_voidSendStringSyncNonBlocking("\nEnter your Password:\n(Note: Press # when you are done)\n");
                MUART_voidClearBuffer();
                MUART_voidClearBuffer();
                for (u8 j = 0; j < 20; j++)
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	8f 5f       	subi	r24, 0xFF	; 255
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	84 31       	cpi	r24, 0x14	; 20
    18bc:	c8 f2       	brcs	.-78     	; 0x1870 <H_voidLogIn+0xd2>
                    {
                        loggedInAccount.password[j] = '\0';
                        break;
                    }
                }
                if (strcmp(loggedInAccount.password, accounts[i].password) == 0)
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	9c 01       	movw	r18, r24
    18d2:	22 0f       	add	r18, r18
    18d4:	33 1f       	adc	r19, r19
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	44 96       	adiw	r24, 0x14	; 20
    18e0:	9c 01       	movw	r18, r24
    18e2:	23 5f       	subi	r18, 0xF3	; 243
    18e4:	3a 4f       	sbci	r19, 0xFA	; 250
    18e6:	ce 01       	movw	r24, r28
    18e8:	07 96       	adiw	r24, 0x07	; 7
    18ea:	44 96       	adiw	r24, 0x14	; 20
    18ec:	b9 01       	movw	r22, r18
    18ee:	0e 94 11 15 	call	0x2a22	; 0x2a22 <strcmp>
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	b9 f4       	brne	.+46     	; 0x1924 <H_voidLogIn+0x186>
                {
                    MUART_voidSendStringSyncNonBlocking("1.Home Page\n2.Replace Account\n");
    18f6:	8e ec       	ldi	r24, 0xCE	; 206
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
                    MUART_voidClearBuffer();
    18fe:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
                    MUART_voidClearBuffer();
    1902:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
                    localu8FirstChoice = MUART_u8ReadByteSyncBlocking();
    1906:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    190a:	8e 83       	std	Y+6, r24	; 0x06
                    if (localu8FirstChoice == '1')
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	81 33       	cpi	r24, 0x31	; 49
    1910:	19 f4       	brne	.+6      	; 0x1918 <H_voidLogIn+0x17a>
                    {
                        H_voidHomePageAfterLogIn();
    1912:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <H_voidHomePageAfterLogIn>
    1916:	11 c0       	rjmp	.+34     	; 0x193a <H_voidLogIn+0x19c>
                    }
                    else if (localu8FirstChoice == '2')
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	82 33       	cpi	r24, 0x32	; 50
    191c:	71 f4       	brne	.+28     	; 0x193a <H_voidLogIn+0x19c>
                    {
                        H_voidReplaceAccount();
    191e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <H_voidReplaceAccount>
    1922:	0b c0       	rjmp	.+22     	; 0x193a <H_voidLogIn+0x19c>
                    }
                    break;
                }
                else
                {
                    attempts++;
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	8a 83       	std	Y+2, r24	; 0x02
                    MUART_voidSendStringSyncNonBlocking("Incorrect Password. Please try again.\n");
    192a:	8d ee       	ldi	r24, 0xED	; 237
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    {
        if (strcmp(loggedInAccount.username, accounts[i].username) == 0)
        {
            usernameFound = 1;
            u8 attempts = 0;
            while (attempts < 3)
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	08 f4       	brcc	.+2      	; 0x193a <H_voidLogIn+0x19c>
    1938:	91 cf       	rjmp	.-222    	; 0x185c <H_voidLogIn+0xbe>
                {
                    attempts++;
                    MUART_voidSendStringSyncNonBlocking("Incorrect Password. Please try again.\n");
                }
            }
            if (attempts == 3)
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 f4       	brne	.+36     	; 0x1964 <H_voidLogIn+0x1c6>
            {
                MUART_voidSendStringSyncNonBlocking("Maximum attempts reached. Please try again later.\n");
    1940:	84 e1       	ldi	r24, 0x14	; 20
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>

                H_voidGenerateSirenSound();
    1948:	0e 94 c6 0c 	call	0x198c	; 0x198c <H_voidGenerateSirenSound>
                H_voidHomePageLogOrReg();
    194c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <H_voidHomePageLogOrReg>
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <H_voidLogIn+0x1c6>
        {
            loggedInAccount.username[i] = '\0';
            break;
        }
    }
    for (u8 i = 0; i < Global_AccountCounter; i++)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	8b 83       	std	Y+3, r24	; 0x03
    1958:	90 91 02 05 	lds	r25, 0x0502
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	89 17       	cp	r24, r25
    1960:	08 f4       	brcc	.+2      	; 0x1964 <H_voidLogIn+0x1c6>
    1962:	5d cf       	rjmp	.-326    	; 0x181e <H_voidLogIn+0x80>

            }
            break;
        }
    }
    if (!usernameFound)
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	88 23       	and	r24, r24
    1968:	31 f4       	brne	.+12     	; 0x1976 <H_voidLogIn+0x1d8>
    {
        MUART_voidSendStringSyncNonBlocking("Username not found. Please try again.\n");
    196a:	87 e4       	ldi	r24, 0x47	; 71
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
        H_voidHomePageLogOrReg();
    1972:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <H_voidHomePageLogOrReg>
    }
}
    1976:	ae 96       	adiw	r28, 0x2e	; 46
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	08 95       	ret

0000198c <H_voidGenerateSirenSound>:




void H_voidGenerateSirenSound()
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	a2 97       	sbiw	r28, 0x22	; 34
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    for (int i = 0; i < 4; i++)
    19a0:	1a a2       	std	Y+34, r1	; 0x22
    19a2:	19 a2       	std	Y+33, r1	; 0x21
    19a4:	0c c1       	rjmp	.+536    	; 0x1bbe <H_voidGenerateSirenSound+0x232>
    {
    	for (u16 i=0 ; i<255 ;i+=10)
    19a6:	18 a2       	std	Y+32, r1	; 0x20
    19a8:	1f 8e       	std	Y+31, r1	; 0x1f
    19aa:	7a c0       	rjmp	.+244    	; 0x1aa0 <H_voidGenerateSirenSound+0x114>
    	{
		MTIMER0_voidSetOCR0Value(i);
    19ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19ae:	0e 94 49 11 	call	0x2292	; 0x2292 <MTIMER0_voidSetOCR0Value>
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a8 e4       	ldi	r26, 0x48	; 72
    19b8:	b3 e4       	ldi	r27, 0x43	; 67
    19ba:	89 8f       	std	Y+25, r24	; 0x19
    19bc:	9a 8f       	std	Y+26, r25	; 0x1a
    19be:	ab 8f       	std	Y+27, r26	; 0x1b
    19c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	69 8d       	ldd	r22, Y+25	; 0x19
    19c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a ef       	ldi	r20, 0xFA	; 250
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8d 8b       	std	Y+21, r24	; 0x15
    19dc:	9e 8b       	std	Y+22, r25	; 0x16
    19de:	af 8b       	std	Y+23, r26	; 0x17
    19e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <H_voidGenerateSirenSound+0x78>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <H_voidGenerateSirenSound+0xf6>
	else if (__tmp > 65535)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <H_voidGenerateSirenSound+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <H_voidGenerateSirenSound+0xd8>
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4e:	89 89       	ldd	r24, Y+17	; 0x11
    1a50:	9a 89       	ldd	r25, Y+18	; 0x12
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <H_voidGenerateSirenSound+0xc6>
    1a56:	9a 8b       	std	Y+18, r25	; 0x12
    1a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <H_voidGenerateSirenSound+0xba>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <H_voidGenerateSirenSound+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a70:	7e 89       	ldd	r23, Y+22	; 0x16
    1a72:	8f 89       	ldd	r24, Y+23	; 0x17
    1a74:	98 8d       	ldd	r25, Y+24	; 0x18
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	98 8b       	std	Y+16, r25	; 0x10
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
    1a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8c:	98 89       	ldd	r25, Y+16	; 0x10
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <H_voidGenerateSirenSound+0x102>
    1a92:	98 8b       	std	Y+16, r25	; 0x10
    1a94:	8f 87       	std	Y+15, r24	; 0x0f

void H_voidGenerateSirenSound()
{
    for (int i = 0; i < 4; i++)
    {
    	for (u16 i=0 ; i<255 ;i+=10)
    1a96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a98:	98 a1       	ldd	r25, Y+32	; 0x20
    1a9a:	0a 96       	adiw	r24, 0x0a	; 10
    1a9c:	98 a3       	std	Y+32, r25	; 0x20
    1a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    1aa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa2:	98 a1       	ldd	r25, Y+32	; 0x20
    1aa4:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <H_voidGenerateSirenSound+0x120>
    1aaa:	80 cf       	rjmp	.-256    	; 0x19ac <H_voidGenerateSirenSound+0x20>
    	{
		MTIMER0_voidSetOCR0Value(i);
		_delay_ms(200);
    	}
        for (int j = 255; j >= 0; j-=10)
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab4:	7a c0       	rjmp	.+244    	; 0x1baa <H_voidGenerateSirenSound+0x21e>
        {
            MTIMER0_voidSetOCR0Value(j);
    1ab6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab8:	0e 94 49 11 	call	0x2292	; 0x2292 <MTIMER0_voidSetOCR0Value>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	a8 e4       	ldi	r26, 0x48	; 72
    1ac2:	b3 e4       	ldi	r27, 0x43	; 67
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a ef       	ldi	r20, 0xFA	; 250
    1ada:	54 e4       	ldi	r21, 0x44	; 68
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <H_voidGenerateSirenSound+0x182>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <H_voidGenerateSirenSound+0x200>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <H_voidGenerateSirenSound+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <H_voidGenerateSirenSound+0x1e2>
    1b50:	88 ec       	ldi	r24, 0xC8	; 200
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <H_voidGenerateSirenSound+0x1d0>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <H_voidGenerateSirenSound+0x1c4>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <H_voidGenerateSirenSound+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <H_voidGenerateSirenSound+0x20c>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    	for (u16 i=0 ; i<255 ;i+=10)
    	{
		MTIMER0_voidSetOCR0Value(i);
		_delay_ms(200);
    	}
        for (int j = 255; j >= 0; j-=10)
    1ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba4:	0a 97       	sbiw	r24, 0x0a	; 10
    1ba6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba8:	8d 8f       	std	Y+29, r24	; 0x1d
    1baa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bae:	99 23       	and	r25, r25
    1bb0:	0c f0       	brlt	.+2      	; 0x1bb4 <H_voidGenerateSirenSound+0x228>
    1bb2:	81 cf       	rjmp	.-254    	; 0x1ab6 <H_voidGenerateSirenSound+0x12a>



void H_voidGenerateSirenSound()
{
    for (int i = 0; i < 4; i++)
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	9a a3       	std	Y+34, r25	; 0x22
    1bbc:	89 a3       	std	Y+33, r24	; 0x21
    1bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	0c f4       	brge	.+2      	; 0x1bca <H_voidGenerateSirenSound+0x23e>
    1bc8:	ee ce       	rjmp	.-548    	; 0x19a6 <H_voidGenerateSirenSound+0x1a>
        {
            MTIMER0_voidSetOCR0Value(j);
            _delay_ms(200);
        }
    }
}
    1bca:	a2 96       	adiw	r28, 0x22	; 34
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <H_voidHomePageLogOrReg>:

void H_voidHomePageLogOrReg()
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
	u8 localu8FirstChoise=0;
    1be6:	19 82       	std	Y+1, r1	; 0x01
	MUART_voidSendStringSyncNonBlocking("\nHello in your Home\n");
    1be8:	8e e6       	ldi	r24, 0x6E	; 110
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("\n1-log in\n2-Register\n");
    1bf0:	83 e8       	ldi	r24, 0x83	; 131
    1bf2:	93 e0       	ldi	r25, 0x03	; 3
    1bf4:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidClearBuffer();
    1bf8:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
	MUART_voidClearBuffer();
    1bfc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
	localu8FirstChoise=MUART_u8ReadByteSyncBlocking();
    1c00:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    1c04:	89 83       	std	Y+1, r24	; 0x01

	if (localu8FirstChoise=='1')
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	81 33       	cpi	r24, 0x31	; 49
    1c0a:	19 f4       	brne	.+6      	; 0x1c12 <H_voidHomePageLogOrReg+0x36>
	{
		H_voidLogIn();
    1c0c:	0e 94 cf 0b 	call	0x179e	; 0x179e <H_voidLogIn>
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <H_voidHomePageLogOrReg+0x40>
	}
	else if (localu8FirstChoise=='2')
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	82 33       	cpi	r24, 0x32	; 50
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <H_voidHomePageLogOrReg+0x40>
	{
		H_voidRegister();
    1c18:	0e 94 a8 09 	call	0x1350	; 0x1350 <H_voidRegister>
	}

}
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <H_voidHomePageAfterLogIn>:

void H_voidHomePageAfterLogIn()
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <H_voidHomePageAfterLogIn+0x6>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8choice=0;
    1c2e:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8Option=0;
    1c30:	19 82       	std	Y+1, r1	; 0x01
	MUART_voidSendStringSyncNonBlocking("HELLO IN YOUR HOME\n");
    1c32:	89 e9       	ldi	r24, 0x99	; 153
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("1-OPEN THE DOOR\n");
    1c3a:	8d ea       	ldi	r24, 0xAD	; 173
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("2-CLOSE THE DOOR\n");
    1c42:	8e eb       	ldi	r24, 0xBE	; 190
    1c44:	93 e0       	ldi	r25, 0x03	; 3
    1c46:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("3-LED ON\n");
    1c4a:	80 ed       	ldi	r24, 0xD0	; 208
    1c4c:	93 e0       	ldi	r25, 0x03	; 3
    1c4e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("4-LED OFF\n");
    1c52:	8a ed       	ldi	r24, 0xDA	; 218
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("5-Log Out\n");
    1c5a:	85 ee       	ldi	r24, 0xE5	; 229
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidClearBuffer();
    1c62:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
	MUART_voidClearBuffer();
    1c66:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <MUART_voidClearBuffer>
	local_u8Option=MUART_u8ReadByteSyncBlocking();
    1c6a:	0e 94 c3 13 	call	0x2786	; 0x2786 <MUART_u8ReadByteSyncBlocking>
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	if (local_u8Option=='1')
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	81 33       	cpi	r24, 0x31	; 49
    1c74:	29 f4       	brne	.+10     	; 0x1c80 <H_voidHomePageAfterLogIn+0x5c>
	{
		H_voidOpeningDoor();
    1c76:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <H_voidOpeningDoor>
		H_voidHomePageAfterLogIn();
    1c7a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <H_voidHomePageAfterLogIn>
    1c7e:	24 c0       	rjmp	.+72     	; 0x1cc8 <H_voidHomePageAfterLogIn+0xa4>
	}
	else if (local_u8Option=='2')
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	82 33       	cpi	r24, 0x32	; 50
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <H_voidHomePageAfterLogIn+0x6c>
	{
		H_voidClosingDoor();
    1c86:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <H_voidClosingDoor>
		H_voidHomePageAfterLogIn();
    1c8a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <H_voidHomePageAfterLogIn>
    1c8e:	1c c0       	rjmp	.+56     	; 0x1cc8 <H_voidHomePageAfterLogIn+0xa4>
	}
	else if (local_u8Option=='3')
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	83 33       	cpi	r24, 0x33	; 51
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <H_voidHomePageAfterLogIn+0x7c>
	{
		H_voidLedOn();
    1c96:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <H_voidLedOn>
		H_voidHomePageAfterLogIn();
    1c9a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <H_voidHomePageAfterLogIn>
    1c9e:	14 c0       	rjmp	.+40     	; 0x1cc8 <H_voidHomePageAfterLogIn+0xa4>

	}
	else if (local_u8Option=='4')
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	84 33       	cpi	r24, 0x34	; 52
    1ca4:	29 f4       	brne	.+10     	; 0x1cb0 <H_voidHomePageAfterLogIn+0x8c>
	{
		H_voidLedOff();
    1ca6:	0e 94 55 10 	call	0x20aa	; 0x20aa <H_voidLedOff>
		H_voidHomePageAfterLogIn();
    1caa:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <H_voidHomePageAfterLogIn>
    1cae:	0c c0       	rjmp	.+24     	; 0x1cc8 <H_voidHomePageAfterLogIn+0xa4>
	}
	else if (local_u8Option == '5')
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	85 33       	cpi	r24, 0x35	; 53
    1cb4:	19 f4       	brne	.+6      	; 0x1cbc <H_voidHomePageAfterLogIn+0x98>
	{
		H_voidHomePageLogOrReg();
    1cb6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <H_voidHomePageLogOrReg>
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <H_voidHomePageAfterLogIn+0xa4>
	}
	else
	{
		MUART_voidSendStringSyncNonBlocking("\nPlease Enter Valid Option\n");
    1cbc:	80 ef       	ldi	r24, 0xF0	; 240
    1cbe:	93 e0       	ldi	r25, 0x03	; 3
    1cc0:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
		H_voidHomePageAfterLogIn();
    1cc4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <H_voidHomePageAfterLogIn>
	}

}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <H_voidOpeningDoor>:

void H_voidOpeningDoor()
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	2f 97       	sbiw	r28, 0x0f	; 15
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    1ce6:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(MOTOR_PORT,MOTOR_PIN);
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 f8 07 	call	0xff0	; 0xff0 <MDIO_GetPinValue>
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_SET)
    1cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	29 f4       	brne	.+10     	; 0x1d02 <H_voidOpeningDoor+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("DOOR IS ALREADY OPENED\n");
    1cf8:	8c e0       	ldi	r24, 0x0C	; 12
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    1d00:	83 c0       	rjmp	.+262    	; 0x1e08 <H_voidOpeningDoor+0x136>
	}
	else
	{
	MUART_voidSendStringSyncNonBlocking("DOOR IS OPENENIG NOW\n\n");
    1d02:	84 e2       	ldi	r24, 0x24	; 36
    1d04:	94 e0       	ldi	r25, 0x04	; 4
    1d06:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MDIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN,DIO_SET);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MDIO_voidSetPinValue>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	aa e7       	ldi	r26, 0x7A	; 122
    1d1a:	b4 e4       	ldi	r27, 0x44	; 68
    1d1c:	8b 87       	std	Y+11, r24	; 0x0b
    1d1e:	9c 87       	std	Y+12, r25	; 0x0c
    1d20:	ad 87       	std	Y+13, r26	; 0x0d
    1d22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	4a ef       	ldi	r20, 0xFA	; 250
    1d32:	54 e4       	ldi	r21, 0x44	; 68
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8f 83       	std	Y+7, r24	; 0x07
    1d3e:	98 87       	std	Y+8, r25	; 0x08
    1d40:	a9 87       	std	Y+9, r26	; 0x09
    1d42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e8       	ldi	r20, 0x80	; 128
    1d52:	5f e3       	ldi	r21, 0x3F	; 63
    1d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d58:	88 23       	and	r24, r24
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <H_voidOpeningDoor+0x94>
		__ticks = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <H_voidOpeningDoor+0x112>
	else if (__tmp > 65535)
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	3f ef       	ldi	r19, 0xFF	; 255
    1d72:	4f e7       	ldi	r20, 0x7F	; 127
    1d74:	57 e4       	ldi	r21, 0x47	; 71
    1d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	4c f5       	brge	.+82     	; 0x1dd0 <H_voidOpeningDoor+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e2       	ldi	r20, 0x20	; 32
    1d8c:	51 e4       	ldi	r21, 0x41	; 65
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <H_voidOpeningDoor+0xf4>
    1da8:	88 ec       	ldi	r24, 0xC8	; 200
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9c 83       	std	Y+4, r25	; 0x04
    1dae:	8b 83       	std	Y+3, r24	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <H_voidOpeningDoor+0xe2>
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	69 f7       	brne	.-38     	; 0x1da8 <H_voidOpeningDoor+0xd6>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <H_voidOpeningDoor+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <H_voidOpeningDoor+0x11e>
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MUART_voidSendStringSyncNonBlocking("DOOR OPENED\n\n");
    1df8:	8b e3       	ldi	r24, 0x3B	; 59
    1dfa:	94 e0       	ldi	r25, 0x04	; 4
    1dfc:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    1e00:	89 e4       	ldi	r24, 0x49	; 73
    1e02:	94 e0       	ldi	r25, 0x04	; 4
    1e04:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	}
}
    1e08:	2f 96       	adiw	r28, 0x0f	; 15
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <H_voidClosingDoor>:

void H_voidClosingDoor()
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	2f 97       	sbiw	r28, 0x0f	; 15
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    1e2e:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(MOTOR_PORT,MOTOR_PIN);
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	0e 94 f8 07 	call	0xff0	; 0xff0 <MDIO_GetPinValue>
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_RESET)
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	88 23       	and	r24, r24
    1e3e:	29 f4       	brne	.+10     	; 0x1e4a <H_voidClosingDoor+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("DOOR IS ALREADY CLOSED\n");
    1e40:	82 e6       	ldi	r24, 0x62	; 98
    1e42:	94 e0       	ldi	r25, 0x04	; 4
    1e44:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    1e48:	83 c0       	rjmp	.+262    	; 0x1f50 <H_voidClosingDoor+0x136>
	}
	else
	{
	MUART_voidSendStringSyncNonBlocking("DOOR IS CLOSING NOW\n\n");
    1e4a:	8a e7       	ldi	r24, 0x7A	; 122
    1e4c:	94 e0       	ldi	r25, 0x04	; 4
    1e4e:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MDIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN,DIO_RESET);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MDIO_voidSetPinValue>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	aa e7       	ldi	r26, 0x7A	; 122
    1e62:	b4 e4       	ldi	r27, 0x44	; 68
    1e64:	8b 87       	std	Y+11, r24	; 0x0b
    1e66:	9c 87       	std	Y+12, r25	; 0x0c
    1e68:	ad 87       	std	Y+13, r26	; 0x0d
    1e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a ef       	ldi	r20, 0xFA	; 250
    1e7a:	54 e4       	ldi	r21, 0x44	; 68
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	98 87       	std	Y+8, r25	; 0x08
    1e88:	a9 87       	std	Y+9, r26	; 0x09
    1e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <H_voidClosingDoor+0x94>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <H_voidClosingDoor+0x112>
	else if (__tmp > 65535)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <H_voidClosingDoor+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <H_voidClosingDoor+0xf4>
    1ef0:	88 ec       	ldi	r24, 0xC8	; 200
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <H_voidClosingDoor+0xe2>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <H_voidClosingDoor+0xd6>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <H_voidClosingDoor+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <H_voidClosingDoor+0x11e>
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MUART_voidSendStringSyncNonBlocking("DOOR CLOSED\n\n");
    1f40:	80 e9       	ldi	r24, 0x90	; 144
    1f42:	94 e0       	ldi	r25, 0x04	; 4
    1f44:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    1f48:	89 e4       	ldi	r24, 0x49	; 73
    1f4a:	94 e0       	ldi	r25, 0x04	; 4
    1f4c:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	}
}
    1f50:	2f 96       	adiw	r28, 0x0f	; 15
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <H_voidLedOn>:

void H_voidLedOn()
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    1f76:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(LED_PORT,LED_PIN);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	61 e0       	ldi	r22, 0x01	; 1
    1f7c:	0e 94 f8 07 	call	0xff0	; 0xff0 <MDIO_GetPinValue>
    1f80:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_SET)
    1f82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	29 f4       	brne	.+10     	; 0x1f92 <H_voidLedOn+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("LED IS ALREADY ON\n\n");
    1f88:	8e e9       	ldi	r24, 0x9E	; 158
    1f8a:	94 e0       	ldi	r25, 0x04	; 4
    1f8c:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    1f90:	83 c0       	rjmp	.+262    	; 0x2098 <H_voidLedOn+0x136>
	}
	else
	{
	MUART_voidSendStringSyncNonBlocking("LED IS ON NOW\n\n");
    1f92:	82 eb       	ldi	r24, 0xB2	; 178
    1f94:	94 e0       	ldi	r25, 0x04	; 4
    1f96:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MDIO_voidSetPinValue(LED_PORT,LED_PIN,DIO_SET);
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MDIO_voidSetPinValue>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	aa e7       	ldi	r26, 0x7A	; 122
    1faa:	b4 e4       	ldi	r27, 0x44	; 68
    1fac:	8b 87       	std	Y+11, r24	; 0x0b
    1fae:	9c 87       	std	Y+12, r25	; 0x0c
    1fb0:	ad 87       	std	Y+13, r26	; 0x0d
    1fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8f 83       	std	Y+7, r24	; 0x07
    1fce:	98 87       	std	Y+8, r25	; 0x08
    1fd0:	a9 87       	std	Y+9, r26	; 0x09
    1fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <H_voidLedOn+0x94>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <H_voidLedOn+0x112>
	else if (__tmp > 65535)
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <H_voidLedOn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <H_voidLedOn+0xf4>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <H_voidLedOn+0xe2>
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <H_voidLedOn+0xd6>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <H_voidLedOn+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <H_voidLedOn+0x11e>
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MUART_voidSendStringSyncNonBlocking("LED ON\n\n");
    2088:	82 ec       	ldi	r24, 0xC2	; 194
    208a:	94 e0       	ldi	r25, 0x04	; 4
    208c:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    2090:	89 e4       	ldi	r24, 0x49	; 73
    2092:	94 e0       	ldi	r25, 0x04	; 4
    2094:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	}
}
    2098:	2f 96       	adiw	r28, 0x0f	; 15
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <H_voidLedOff>:

void H_voidLedOff()
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	2f 97       	sbiw	r28, 0x0f	; 15
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Check=0;
    20be:	1f 86       	std	Y+15, r1	; 0x0f
	local_u8Check=MDIO_GetPinValue(LED_PORT,LED_PIN);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	0e 94 f8 07 	call	0xff0	; 0xff0 <MDIO_GetPinValue>
    20c8:	8f 87       	std	Y+15, r24	; 0x0f
	if(local_u8Check==DIO_RESET)
    20ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    20cc:	88 23       	and	r24, r24
    20ce:	29 f4       	brne	.+10     	; 0x20da <H_voidLedOff+0x30>
	{
		MUART_voidSendStringSyncNonBlocking("LED IS ALREADY OFF\n");
    20d0:	8b ec       	ldi	r24, 0xCB	; 203
    20d2:	94 e0       	ldi	r25, 0x04	; 4
    20d4:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
    20d8:	83 c0       	rjmp	.+262    	; 0x21e0 <H_voidLedOff+0x136>
	}
	else
	{
		MUART_voidSendStringSyncNonBlocking("LED IS OFF NOW\n\n");
    20da:	8f ed       	ldi	r24, 0xDF	; 223
    20dc:	94 e0       	ldi	r25, 0x04	; 4
    20de:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
		MDIO_voidSetPinValue(LED_PORT,LED_PIN,DIO_RESET);
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MDIO_voidSetPinValue>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	aa e7       	ldi	r26, 0x7A	; 122
    20f2:	b4 e4       	ldi	r27, 0x44	; 68
    20f4:	8b 87       	std	Y+11, r24	; 0x0b
    20f6:	9c 87       	std	Y+12, r25	; 0x0c
    20f8:	ad 87       	std	Y+13, r26	; 0x0d
    20fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	4a ef       	ldi	r20, 0xFA	; 250
    210a:	54 e4       	ldi	r21, 0x44	; 68
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8f 83       	std	Y+7, r24	; 0x07
    2116:	98 87       	std	Y+8, r25	; 0x08
    2118:	a9 87       	std	Y+9, r26	; 0x09
    211a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2130:	88 23       	and	r24, r24
    2132:	2c f4       	brge	.+10     	; 0x213e <H_voidLedOff+0x94>
		__ticks = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <H_voidLedOff+0x112>
	else if (__tmp > 65535)
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	3f ef       	ldi	r19, 0xFF	; 255
    214a:	4f e7       	ldi	r20, 0x7F	; 127
    214c:	57 e4       	ldi	r21, 0x47	; 71
    214e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <H_voidLedOff+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2156:	6b 85       	ldd	r22, Y+11	; 0x0b
    2158:	7c 85       	ldd	r23, Y+12	; 0x0c
    215a:	8d 85       	ldd	r24, Y+13	; 0x0d
    215c:	9e 85       	ldd	r25, Y+14	; 0x0e
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e2       	ldi	r20, 0x20	; 32
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	0f c0       	rjmp	.+30     	; 0x219e <H_voidLedOff+0xf4>
    2180:	88 ec       	ldi	r24, 0xC8	; 200
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <H_voidLedOff+0xe2>
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	69 f7       	brne	.-38     	; 0x2180 <H_voidLedOff+0xd6>
    21a6:	14 c0       	rjmp	.+40     	; 0x21d0 <H_voidLedOff+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	6f 81       	ldd	r22, Y+7	; 0x07
    21aa:	78 85       	ldd	r23, Y+8	; 0x08
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <H_voidLedOff+0x11e>
    21cc:	9a 83       	std	Y+2, r25	; 0x02
    21ce:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		MUART_voidSendStringSyncNonBlocking("LED OFF\n\n");
    21d0:	80 ef       	ldi	r24, 0xF0	; 240
    21d2:	94 e0       	ldi	r25, 0x04	; 4
    21d4:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
		MUART_voidSendStringSyncNonBlocking("-----------------------\n");
    21d8:	89 e4       	ldi	r24, 0x49	; 73
    21da:	94 e0       	ldi	r25, 0x04	; 4
    21dc:	0e 94 8c 13 	call	0x2718	; 0x2718 <MUART_voidSendStringSyncNonBlocking>
	}
}
    21e0:	2f 96       	adiw	r28, 0x0f	; 15
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    21fa:	af e5       	ldi	r26, 0x5F	; 95
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	ef e5       	ldi	r30, 0x5F	; 95
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	80 68       	ori	r24, 0x80	; 128
    2206:	8c 93       	st	X, r24
}
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    2216:	af e5       	ldi	r26, 0x5F	; 95
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ef e5       	ldi	r30, 0x5F	; 95
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 77       	andi	r24, 0x7F	; 127
    2222:	8c 93       	st	X, r24
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <MTIMER0_voidInit>:

void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
		TCCR0 &= 0b11001000;
		TCCR0 |= (TIMER0_CLK|(CTC_0C0_MODE<<4)) ;

	#elif TIMER0_MODE == FAST_PWM_MODE
		// Set Wave Generation Mode to FAST PWM Mode
		SET_BIT(TCCR0,3);
    2232:	a3 e5       	ldi	r26, 0x53	; 83
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e3 e5       	ldi	r30, 0x53	; 83
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	88 60       	ori	r24, 0x08	; 8
    223e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    2240:	a3 e5       	ldi	r26, 0x53	; 83
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e3 e5       	ldi	r30, 0x53	; 83
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	80 64       	ori	r24, 0x40	; 64
    224c:	8c 93       	st	X, r24

		// DISAPLE Interrupts
		CLR_BIT(TIMSK,1);
    224e:	a9 e5       	ldi	r26, 0x59	; 89
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e9 e5       	ldi	r30, 0x59	; 89
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8d 7f       	andi	r24, 0xFD	; 253
    225a:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,0);
    225c:	a9 e5       	ldi	r26, 0x59	; 89
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e9 e5       	ldi	r30, 0x59	; 89
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8e 7f       	andi	r24, 0xFE	; 254
    2268:	8c 93       	st	X, r24

		//Set OCR0 VALUE
		OCR0 = OCR0_VALUE;
    226a:	ec e5       	ldi	r30, 0x5C	; 92
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	10 82       	st	Z, r1

		// SET OC0 and Start Timer by setting its clock
		TCCR0 &= TIEMR0_CLK_OC0_MASK ;
    2270:	a3 e5       	ldi	r26, 0x53	; 83
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e3 e5       	ldi	r30, 0x53	; 83
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	88 7c       	andi	r24, 0xC8	; 200
    227c:	8c 93       	st	X, r24
		TCCR0 |= (TIMER0_CLK|(FAST_PWM_OC0_MODE<<4)) ;
    227e:	a3 e5       	ldi	r26, 0x53	; 83
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e3 e5       	ldi	r30, 0x53	; 83
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	82 62       	ori	r24, 0x22	; 34
    228a:	8c 93       	st	X, r24

	#endif
}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value(u8 A_u8NoOfTicks)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	0f 92       	push	r0
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	89 83       	std	Y+1, r24	; 0x01
	OCR0=A_u8NoOfTicks;
    229e:	ec e5       	ldi	r30, 0x5C	; 92
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	80 83       	st	Z, r24
}
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
    22ba:	e2 e5       	ldi	r30, 0x52	; 82
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	80 83       	st	Z, r24
}
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer (void)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
    22d2:	a3 e5       	ldi	r26, 0x53	; 83
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e3 e5       	ldi	r30, 0x53	; 83
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	88 7f       	andi	r24, 0xF8	; 248
    22de:	8c 93       	st	X, r24
}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <MTIMER0_voidSetOVFCallback>:

void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void))
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <MTIMER0_voidSetOVFCallback+0x6>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	31 f0       	breq	.+12     	; 0x2308 <MTIMER0_voidSetOVFCallback+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	90 93 04 05 	sts	0x0504, r25
    2304:	80 93 03 05 	sts	0x0503, r24
	}
}
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <MTIMER0_voidSetCTCCallback>:

void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	00 d0       	rcall	.+0      	; 0x2318 <MTIMER0_voidSetCTCCallback+0x6>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	31 f0       	breq	.+12     	; 0x2334 <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	90 93 06 05 	sts	0x0506, r25
    2330:	80 93 05 05 	sts	0x0505, r24
	}
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    233e:	1f 92       	push	r1
    2340:	0f 92       	push	r0
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	0f 92       	push	r0
    2346:	11 24       	eor	r1, r1
    2348:	2f 93       	push	r18
    234a:	3f 93       	push	r19
    234c:	4f 93       	push	r20
    234e:	5f 93       	push	r21
    2350:	6f 93       	push	r22
    2352:	7f 93       	push	r23
    2354:	8f 93       	push	r24
    2356:	9f 93       	push	r25
    2358:	af 93       	push	r26
    235a:	bf 93       	push	r27
    235c:	ef 93       	push	r30
    235e:	ff 93       	push	r31
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    2368:	80 91 03 05 	lds	r24, 0x0503
    236c:	90 91 04 05 	lds	r25, 0x0504
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	29 f0       	breq	.+10     	; 0x237e <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    2374:	e0 91 03 05 	lds	r30, 0x0503
    2378:	f0 91 04 05 	lds	r31, 0x0504
    237c:	09 95       	icall
	}
}
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	ff 91       	pop	r31
    2384:	ef 91       	pop	r30
    2386:	bf 91       	pop	r27
    2388:	af 91       	pop	r26
    238a:	9f 91       	pop	r25
    238c:	8f 91       	pop	r24
    238e:	7f 91       	pop	r23
    2390:	6f 91       	pop	r22
    2392:	5f 91       	pop	r21
    2394:	4f 91       	pop	r20
    2396:	3f 91       	pop	r19
    2398:	2f 91       	pop	r18
    239a:	0f 90       	pop	r0
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	0f 90       	pop	r0
    23a0:	1f 90       	pop	r1
    23a2:	18 95       	reti

000023a4 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    23a4:	1f 92       	push	r1
    23a6:	0f 92       	push	r0
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	ef 93       	push	r30
    23c4:	ff 93       	push	r31
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CALLBACK != NULL)
    23ce:	80 91 05 05 	lds	r24, 0x0505
    23d2:	90 91 06 05 	lds	r25, 0x0506
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	29 f0       	breq	.+10     	; 0x23e4 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
    23da:	e0 91 05 05 	lds	r30, 0x0505
    23de:	f0 91 06 05 	lds	r31, 0x0506
    23e2:	09 95       	icall
	}
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	bf 91       	pop	r27
    23ee:	af 91       	pop	r26
    23f0:	9f 91       	pop	r25
    23f2:	8f 91       	pop	r24
    23f4:	7f 91       	pop	r23
    23f6:	6f 91       	pop	r22
    23f8:	5f 91       	pop	r21
    23fa:	4f 91       	pop	r20
    23fc:	3f 91       	pop	r19
    23fe:	2f 91       	pop	r18
    2400:	0f 90       	pop	r0
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	0f 90       	pop	r0
    2406:	1f 90       	pop	r1
    2408:	18 95       	reti

0000240a <MTIMER1_voidInit>:

void MTIMER1_voidInit()
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	// Select TIMER 1 MODE ==> 14
	CLR_BIT(TCCR1A,0);
    2412:	af e4       	ldi	r26, 0x4F	; 79
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e4       	ldi	r30, 0x4F	; 79
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8e 7f       	andi	r24, 0xFE	; 254
    241e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    2420:	af e4       	ldi	r26, 0x4F	; 79
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	ef e4       	ldi	r30, 0x4F	; 79
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	82 60       	ori	r24, 0x02	; 2
    242c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    242e:	ae e4       	ldi	r26, 0x4E	; 78
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	ee e4       	ldi	r30, 0x4E	; 78
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	88 60       	ori	r24, 0x08	; 8
    243a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    243c:	ae e4       	ldi	r26, 0x4E	; 78
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	ee e4       	ldi	r30, 0x4E	; 78
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 61       	ori	r24, 0x10	; 16
    2448:	8c 93       	st	X, r24

	// Non-Inverting Mode for OC1A
	CLR_BIT(TCCR1A,6);
    244a:	af e4       	ldi	r26, 0x4F	; 79
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	ef e4       	ldi	r30, 0x4F	; 79
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8f 7b       	andi	r24, 0xBF	; 191
    2456:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,7);
    2458:	af e4       	ldi	r26, 0x4F	; 79
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ef e4       	ldi	r30, 0x4F	; 79
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 68       	ori	r24, 0x80	; 128
    2464:	8c 93       	st	X, r24

	// ICR1 = 19999
	ICR1 = 19999;
    2466:	e6 e4       	ldi	r30, 0x46	; 70
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	8f e1       	ldi	r24, 0x1F	; 31
    246c:	9e e4       	ldi	r25, 0x4E	; 78
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24

	//OCR1A
	OCR1A = 1500;
    2472:	ea e4       	ldi	r30, 0x4A	; 74
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	8c ed       	ldi	r24, 0xDC	; 220
    2478:	95 e0       	ldi	r25, 0x05	; 5
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24

	// Start Timer
	CLR_BIT(TCCR1B,2);
    247e:	ae e4       	ldi	r26, 0x4E	; 78
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ee e4       	ldi	r30, 0x4E	; 78
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	8b 7f       	andi	r24, 0xFB	; 251
    248a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    248c:	ae e4       	ldi	r26, 0x4E	; 78
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ee e4       	ldi	r30, 0x4E	; 78
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	82 60       	ori	r24, 0x02	; 2
    2498:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    249a:	ae e4       	ldi	r26, 0x4E	; 78
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	ee e4       	ldi	r30, 0x4E	; 78
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8e 7f       	andi	r24, 0xFE	; 254
    24a6:	8c 93       	st	X, r24
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <MTIMER1_voidSetOCR1AValue>:

void MTIMER1_voidSetOCR1AValue (u16 A_u16Value)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <MTIMER1_voidSetOCR1AValue+0x6>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Value;
    24bc:	ea e4       	ldi	r30, 0x4A	; 74
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
}
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <MTIMER1_voidInitSWICU>:

void MTIMER1_voidInitSWICU()
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
	// Start Timer by setting its clock pre-scaler
	CLR_BIT(TCCR1B,0);
    24da:	ae e4       	ldi	r26, 0x4E	; 78
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	ee e4       	ldi	r30, 0x4E	; 78
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	8e 7f       	andi	r24, 0xFE	; 254
    24e6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    24e8:	ae e4       	ldi	r26, 0x4E	; 78
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ee e4       	ldi	r30, 0x4E	; 78
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	82 60       	ori	r24, 0x02	; 2
    24f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    24f6:	ae e4       	ldi	r26, 0x4E	; 78
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	ee e4       	ldi	r30, 0x4E	; 78
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	8b 7f       	andi	r24, 0xFB	; 251
    2502:	8c 93       	st	X, r24
}
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <MTIMER1_voidSetTimerValue>:
void MTIMER1_voidSetTimerValue (u16 A_u16Value)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	00 d0       	rcall	.+0      	; 0x2510 <MTIMER1_voidSetTimerValue+0x6>
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=A_u16Value;
    2518:	ec e4       	ldi	r30, 0x4C	; 76
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <MTIMER1_u16ReadTimerValue>:

u16 MTIMER1_u16ReadTimerValue(void)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2536:	ec e4       	ldi	r30, 0x4C	; 76
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <MUART_voidInit>:
#define RXC_BIT 7

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <MUART_voidInit+0x6>
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    254e:	83 e3       	ldi	r24, 0x33	; 51
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01

	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    2556:	e9 e2       	ldi	r30, 0x29	; 41
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    255e:	e0 e4       	ldi	r30, 0x40	; 64
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	89 2f       	mov	r24, r25
    2568:	99 27       	eor	r25, r25
    256a:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    256c:	aa e2       	ldi	r26, 0x2A	; 42
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ea e2       	ldi	r30, 0x2A	; 42
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8b 7f       	andi	r24, 0xFB	; 251
    2578:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    257a:	e0 e4       	ldi	r30, 0x40	; 64
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	86 e8       	ldi	r24, 0x86	; 134
    2580:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    2582:	aa e2       	ldi	r26, 0x2A	; 42
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	ea e2       	ldi	r30, 0x2A	; 42
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 60       	ori	r24, 0x08	; 8
    258e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    2590:	aa e2       	ldi	r26, 0x2A	; 42
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	ea e2       	ldi	r30, 0x2A	; 42
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	80 61       	ori	r24, 0x10	; 16
    259c:	8c 93       	st	X, r24

}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <MUART_voidClearBuffer>:

void MUART_voidClearBuffer()
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    u8 temp;
    temp = UDR;
    25b2:	ec e2       	ldi	r30, 0x2C	; 44
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(UCSRA, RXC_BIT);
    25ba:	ab e2       	ldi	r26, 0x2B	; 43
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	eb e2       	ldi	r30, 0x2B	; 43
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 77       	andi	r24, 0x7F	; 127
    25c6:	8c 93       	st	X, r24
}
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <MUART_voidSendByteSyncBlocking>:

void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
    25dc:	eb e2       	ldi	r30, 0x2B	; 43
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	82 95       	swap	r24
    25e4:	86 95       	lsr	r24
    25e6:	87 70       	andi	r24, 0x07	; 7
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	81 70       	andi	r24, 0x01	; 1
    25ee:	90 70       	andi	r25, 0x00	; 0
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	a1 f3       	breq	.-24     	; 0x25dc <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    25f4:	ec e2       	ldi	r30, 0x2C	; 44
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	80 83       	st	Z, r24

	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0);
    25fc:	eb e2       	ldi	r30, 0x2B	; 43
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	82 95       	swap	r24
    2604:	86 95       	lsr	r24
    2606:	87 70       	andi	r24, 0x07	; 7
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	81 70       	andi	r24, 0x01	; 1
    260e:	90 70       	andi	r25, 0x00	; 0
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	a1 f3       	breq	.-24     	; 0x25fc <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    2614:	ab e2       	ldi	r26, 0x2B	; 43
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	eb e2       	ldi	r30, 0x2B	; 43
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 64       	ori	r24, 0x40	; 64
    2620:	8c 93       	st	X, r24

}
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <MUART_voidSendByteSyncNonBlocking+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <MUART_voidSendByteSyncNonBlocking+0x8>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	1a 82       	std	Y+2, r1	; 0x02
    263e:	1b 82       	std	Y+3, r1	; 0x03
    2640:	1c 82       	std	Y+4, r1	; 0x04
    2642:	17 c0       	rjmp	.+46     	; 0x2672 <MUART_voidSendByteSyncNonBlocking+0x48>
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	ab 81       	ldd	r26, Y+3	; 0x03
    264a:	bc 81       	ldd	r27, Y+4	; 0x04
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	a1 1d       	adc	r26, r1
    2650:	b1 1d       	adc	r27, r1
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	ab 83       	std	Y+3, r26	; 0x03
    2658:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	ab 81       	ldd	r26, Y+3	; 0x03
    2660:	bc 81       	ldd	r27, Y+4	; 0x04
    2662:	88 38       	cpi	r24, 0x88	; 136
    2664:	23 e1       	ldi	r18, 0x13	; 19
    2666:	92 07       	cpc	r25, r18
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	a2 07       	cpc	r26, r18
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	b2 07       	cpc	r27, r18
    2670:	61 f0       	breq	.+24     	; 0x268a <MUART_voidSendByteSyncNonBlocking+0x60>

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;
	// wait until UDR is empty
	while(GET_BIT(UCSRA,5)==0)
    2672:	eb e2       	ldi	r30, 0x2B	; 43
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	82 95       	swap	r24
    267a:	86 95       	lsr	r24
    267c:	87 70       	andi	r24, 0x07	; 7
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	e9 f2       	breq	.-70     	; 0x2644 <MUART_voidSendByteSyncNonBlocking+0x1a>
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	ab 81       	ldd	r26, Y+3	; 0x03
    2690:	bc 81       	ldd	r27, Y+4	; 0x04
    2692:	88 38       	cpi	r24, 0x88	; 136
    2694:	23 e1       	ldi	r18, 0x13	; 19
    2696:	92 07       	cpc	r25, r18
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	a2 07       	cpc	r26, r18
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	b2 07       	cpc	r27, r18
    26a0:	99 f1       	breq	.+102    	; 0x2708 <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    26a2:	19 82       	std	Y+1, r1	; 0x01
    26a4:	1a 82       	std	Y+2, r1	; 0x02
    26a6:	1b 82       	std	Y+3, r1	; 0x03
    26a8:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    26aa:	ec e2       	ldi	r30, 0x2C	; 44
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	80 83       	st	Z, r24
    26b2:	17 c0       	rjmp	.+46     	; 0x26e2 <MUART_voidSendByteSyncNonBlocking+0xb8>

		// wait until UDR is empty
		while(GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	ab 81       	ldd	r26, Y+3	; 0x03
    26ba:	bc 81       	ldd	r27, Y+4	; 0x04
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	a1 1d       	adc	r26, r1
    26c0:	b1 1d       	adc	r27, r1
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	ab 83       	std	Y+3, r26	; 0x03
    26c8:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	ab 81       	ldd	r26, Y+3	; 0x03
    26d0:	bc 81       	ldd	r27, Y+4	; 0x04
    26d2:	88 38       	cpi	r24, 0x88	; 136
    26d4:	23 e1       	ldi	r18, 0x13	; 19
    26d6:	92 07       	cpc	r25, r18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	a2 07       	cpc	r26, r18
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	b2 07       	cpc	r27, r18
    26e0:	61 f0       	breq	.+24     	; 0x26fa <MUART_voidSendByteSyncNonBlocking+0xd0>
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;

		// wait until UDR is empty
		while(GET_BIT(UCSRA,5)==0)
    26e2:	eb e2       	ldi	r30, 0x2B	; 43
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	82 95       	swap	r24
    26ea:	86 95       	lsr	r24
    26ec:	87 70       	andi	r24, 0x07	; 7
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	81 70       	andi	r24, 0x01	; 1
    26f4:	90 70       	andi	r25, 0x00	; 0
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	e9 f2       	breq	.-70     	; 0x26b4 <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    26fa:	ab e2       	ldi	r26, 0x2B	; 43
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	80 64       	ori	r24, 0x40	; 64
    2706:	8c 93       	st	X, r24
	}
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <MUART_voidSendStringSyncNonBlocking>:



void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	00 d0       	rcall	.+0      	; 0x271e <MUART_voidSendStringSyncNonBlocking+0x6>
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	0b c0       	rjmp	.+22     	; 0x273e <MUART_voidSendStringSyncNonBlocking+0x26>
	while (*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    2728:	e9 81       	ldd	r30, Y+1	; 0x01
    272a:	fa 81       	ldd	r31, Y+2	; 0x02
    272c:	20 81       	ld	r18, Z
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	82 2f       	mov	r24, r18
    273a:	0e 94 15 13 	call	0x262a	; 0x262a <MUART_voidSendByteSyncNonBlocking>



void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while (*A_pu8String > 0)
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	fa 81       	ldd	r31, Y+2	; 0x02
    2742:	80 81       	ld	r24, Z
    2744:	88 23       	and	r24, r24
    2746:	81 f7       	brne	.-32     	; 0x2728 <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,5)==0)
    275e:	eb e2       	ldi	r30, 0x2B	; 43
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	82 95       	swap	r24
    2766:	86 95       	lsr	r24
    2768:	87 70       	andi	r24, 0x07	; 7
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	81 70       	andi	r24, 0x01	; 1
    2770:	90 70       	andi	r25, 0x00	; 0
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	21 f4       	brne	.+8      	; 0x277e <MUART_voidSendByteAsync+0x2c>
	{
		UDR = A_u8DataByte;
    2776:	ec e2       	ldi	r30, 0x2C	; 44
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	80 83       	st	Z, r24
	}
}
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <MUART_u8ReadByteSyncBlocking>:


u8 MUART_u8ReadByteSyncBlocking (void)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0);
    278e:	eb e2       	ldi	r30, 0x2B	; 43
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	88 23       	and	r24, r24
    2796:	dc f7       	brge	.-10     	; 0x278e <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    2798:	ec e2       	ldi	r30, 0x2C	; 44
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
}
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync (void)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    27ac:	ec e2       	ldi	r30, 0x2C	; 44
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
}
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <MUART_u8ReadByteSyncNonBlocking+0x6>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <MUART_u8ReadByteSyncNonBlocking+0x8>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    27ca:	19 82       	std	Y+1, r1	; 0x01
    27cc:	1a 82       	std	Y+2, r1	; 0x02
    27ce:	1b 82       	std	Y+3, r1	; 0x03
    27d0:	1c 82       	std	Y+4, r1	; 0x04
    27d2:	17 c0       	rjmp	.+46     	; 0x2802 <MUART_u8ReadByteSyncNonBlocking+0x4a>
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0)
	{
		local_u32Timeout++;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	ab 81       	ldd	r26, Y+3	; 0x03
    27da:	bc 81       	ldd	r27, Y+4	; 0x04
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	a1 1d       	adc	r26, r1
    27e0:	b1 1d       	adc	r27, r1
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	ab 83       	std	Y+3, r26	; 0x03
    27e8:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	ab 81       	ldd	r26, Y+3	; 0x03
    27f0:	bc 81       	ldd	r27, Y+4	; 0x04
    27f2:	88 38       	cpi	r24, 0x88	; 136
    27f4:	23 e1       	ldi	r18, 0x13	; 19
    27f6:	92 07       	cpc	r25, r18
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	a2 07       	cpc	r26, r18
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	b2 07       	cpc	r27, r18
    2800:	29 f0       	breq	.+10     	; 0x280c <MUART_u8ReadByteSyncNonBlocking+0x54>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u32 local_u32Timeout=0;
	// Wait for Rx Flag
	while (GET_BIT(UCSRA,7)==0)
    2802:	eb e2       	ldi	r30, 0x2B	; 43
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	88 23       	and	r24, r24
    280a:	24 f7       	brge	.-56     	; 0x27d4 <MUART_u8ReadByteSyncNonBlocking+0x1c>
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	ab 81       	ldd	r26, Y+3	; 0x03
    2812:	bc 81       	ldd	r27, Y+4	; 0x04
    2814:	88 38       	cpi	r24, 0x88	; 136
    2816:	23 e1       	ldi	r18, 0x13	; 19
    2818:	92 07       	cpc	r25, r18
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	a2 07       	cpc	r26, r18
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	b2 07       	cpc	r27, r18
    2822:	21 f0       	breq	.+8      	; 0x282c <MUART_u8ReadByteSyncNonBlocking+0x74>
	{
		local_u8ReceivedData = UDR;
    2824:	ec e2       	ldi	r30, 0x2C	; 44
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8ReceivedData;
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <MUART_voidSetCallBack>:
	}
	return Str;
}
*/
void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	00 d0       	rcall	.+0      	; 0x2844 <MUART_voidSetCallBack+0x6>
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	7b 83       	std	Y+3, r23	; 0x03
    284e:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	80 f4       	brcc	.+32     	; 0x2876 <MUART_voidSetCallBack+0x38>
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	61 f0       	breq	.+24     	; 0x2876 <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	fc 01       	movw	r30, r24
    286a:	e9 5f       	subi	r30, 0xF9	; 249
    286c:	fa 4f       	sbci	r31, 0xFA	; 250
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
	}
}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    2882:	1f 92       	push	r1
    2884:	0f 92       	push	r0
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	0f 92       	push	r0
    288a:	11 24       	eor	r1, r1
    288c:	2f 93       	push	r18
    288e:	3f 93       	push	r19
    2890:	4f 93       	push	r20
    2892:	5f 93       	push	r21
    2894:	6f 93       	push	r22
    2896:	7f 93       	push	r23
    2898:	8f 93       	push	r24
    289a:	9f 93       	push	r25
    289c:	af 93       	push	r26
    289e:	bf 93       	push	r27
    28a0:	ef 93       	push	r30
    28a2:	ff 93       	push	r31
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    28ac:	80 91 07 05 	lds	r24, 0x0507
    28b0:	90 91 08 05 	lds	r25, 0x0508
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	29 f0       	breq	.+10     	; 0x28c2 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    28b8:	e0 91 07 05 	lds	r30, 0x0507
    28bc:	f0 91 08 05 	lds	r31, 0x0508
    28c0:	09 95       	icall
	}
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	ff 91       	pop	r31
    28c8:	ef 91       	pop	r30
    28ca:	bf 91       	pop	r27
    28cc:	af 91       	pop	r26
    28ce:	9f 91       	pop	r25
    28d0:	8f 91       	pop	r24
    28d2:	7f 91       	pop	r23
    28d4:	6f 91       	pop	r22
    28d6:	5f 91       	pop	r21
    28d8:	4f 91       	pop	r20
    28da:	3f 91       	pop	r19
    28dc:	2f 91       	pop	r18
    28de:	0f 90       	pop	r0
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	0f 90       	pop	r0
    28e4:	1f 90       	pop	r1
    28e6:	18 95       	reti

000028e8 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    28e8:	1f 92       	push	r1
    28ea:	0f 92       	push	r0
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	0f 92       	push	r0
    28f0:	11 24       	eor	r1, r1
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	4f 93       	push	r20
    28f8:	5f 93       	push	r21
    28fa:	6f 93       	push	r22
    28fc:	7f 93       	push	r23
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	af 93       	push	r26
    2904:	bf 93       	push	r27
    2906:	ef 93       	push	r30
    2908:	ff 93       	push	r31
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    2912:	80 91 09 05 	lds	r24, 0x0509
    2916:	90 91 0a 05 	lds	r25, 0x050A
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	29 f0       	breq	.+10     	; 0x2928 <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    291e:	e0 91 09 05 	lds	r30, 0x0509
    2922:	f0 91 0a 05 	lds	r31, 0x050A
    2926:	09 95       	icall
	}
}
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	bf 91       	pop	r27
    2932:	af 91       	pop	r26
    2934:	9f 91       	pop	r25
    2936:	8f 91       	pop	r24
    2938:	7f 91       	pop	r23
    293a:	6f 91       	pop	r22
    293c:	5f 91       	pop	r21
    293e:	4f 91       	pop	r20
    2940:	3f 91       	pop	r19
    2942:	2f 91       	pop	r18
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0
    294a:	1f 90       	pop	r1
    294c:	18 95       	reti

0000294e <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    294e:	1f 92       	push	r1
    2950:	0f 92       	push	r0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	0f 92       	push	r0
    2956:	11 24       	eor	r1, r1
    2958:	2f 93       	push	r18
    295a:	3f 93       	push	r19
    295c:	4f 93       	push	r20
    295e:	5f 93       	push	r21
    2960:	6f 93       	push	r22
    2962:	7f 93       	push	r23
    2964:	8f 93       	push	r24
    2966:	9f 93       	push	r25
    2968:	af 93       	push	r26
    296a:	bf 93       	push	r27
    296c:	ef 93       	push	r30
    296e:	ff 93       	push	r31
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    2978:	80 91 0b 05 	lds	r24, 0x050B
    297c:	90 91 0c 05 	lds	r25, 0x050C
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	29 f0       	breq	.+10     	; 0x298e <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    2984:	e0 91 0b 05 	lds	r30, 0x050B
    2988:	f0 91 0c 05 	lds	r31, 0x050C
    298c:	09 95       	icall
	}
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	ff 91       	pop	r31
    2994:	ef 91       	pop	r30
    2996:	bf 91       	pop	r27
    2998:	af 91       	pop	r26
    299a:	9f 91       	pop	r25
    299c:	8f 91       	pop	r24
    299e:	7f 91       	pop	r23
    29a0:	6f 91       	pop	r22
    29a2:	5f 91       	pop	r21
    29a4:	4f 91       	pop	r20
    29a6:	3f 91       	pop	r19
    29a8:	2f 91       	pop	r18
    29aa:	0f 90       	pop	r0
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	0f 90       	pop	r0
    29b0:	1f 90       	pop	r1
    29b2:	18 95       	reti

000029b4 <__prologue_saves__>:
    29b4:	2f 92       	push	r2
    29b6:	3f 92       	push	r3
    29b8:	4f 92       	push	r4
    29ba:	5f 92       	push	r5
    29bc:	6f 92       	push	r6
    29be:	7f 92       	push	r7
    29c0:	8f 92       	push	r8
    29c2:	9f 92       	push	r9
    29c4:	af 92       	push	r10
    29c6:	bf 92       	push	r11
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	ca 1b       	sub	r28, r26
    29de:	db 0b       	sbc	r29, r27
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	09 94       	ijmp

000029ec <__epilogue_restores__>:
    29ec:	2a 88       	ldd	r2, Y+18	; 0x12
    29ee:	39 88       	ldd	r3, Y+17	; 0x11
    29f0:	48 88       	ldd	r4, Y+16	; 0x10
    29f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    29fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2a00:	c8 84       	ldd	r12, Y+8	; 0x08
    2a02:	df 80       	ldd	r13, Y+7	; 0x07
    2a04:	ee 80       	ldd	r14, Y+6	; 0x06
    2a06:	fd 80       	ldd	r15, Y+5	; 0x05
    2a08:	0c 81       	ldd	r16, Y+4	; 0x04
    2a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a10:	ce 0f       	add	r28, r30
    2a12:	d1 1d       	adc	r29, r1
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	ed 01       	movw	r28, r26
    2a20:	08 95       	ret

00002a22 <strcmp>:
    2a22:	fb 01       	movw	r30, r22
    2a24:	dc 01       	movw	r26, r24
    2a26:	8d 91       	ld	r24, X+
    2a28:	01 90       	ld	r0, Z+
    2a2a:	80 19       	sub	r24, r0
    2a2c:	01 10       	cpse	r0, r1
    2a2e:	d9 f3       	breq	.-10     	; 0x2a26 <strcmp+0x4>
    2a30:	99 0b       	sbc	r25, r25
    2a32:	08 95       	ret

00002a34 <_exit>:
    2a34:	f8 94       	cli

00002a36 <__stop_program>:
    2a36:	ff cf       	rjmp	.-2      	; 0x2a36 <__stop_program>
